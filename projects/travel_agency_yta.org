# -*- mode: org -*-
#+TITLE: project: starting a travel agency
#+SETUPFILE: ~/set-up-files/basic-setups.org
#+LANGUAGE: en
#+OPTIONS: timestamp:t
#+DESCRIPTION: Java back-end project for probing data and APIs from GDSs, Online Travel Agencies (OTAs), consolidators, etc.: (gradle, angular, spring)
#+KEYWORDS: YTA org-mode Emacs organization GTD getting-things-done git

* Tickets
** Notes
[2024-08-24 Sat 17:47]
- everything that is not tag as [PUBLIC] is internal to YTA
- as soon as a feature or an ongoing task is completed, and it involves a ==[DRAFT]== marked section, clear it from there after completion ([DRAFT] section are not supposed to stay, moved yes, but staying no)
  + example: section [[*\[DRAFT\] Studies findings (various findings, draft version before it is validated and put in specs/documentation pages)][[DRAFT] Studies findings]] is a buffer place that contains all ongoing subsection tasks, after those are completed, they should disappear from "Studies findings"
- *DO NOT ENGAGE* any competitor upfront, or get involved with any partnership *UNTIL THE PRODUCT IS MATURE*, so at least *NOT UNTIL PHASE 3* (phase 2 is just a preparation phase for phase 3)
  + example: do not open YTA to any other TA, or subcontract bookings
  + the risk is that the team (the development in fact) is not ready to handle issues that might occur
- subscribe to travel + hospitality specialised mailing lists/news/communities/forums/etc. (few but trustworthy), and review from there the component(s)/product(s) that need developing/refactoring/etc.
** Reference 0 (YTA000): Generic tasks, recurring tasks, all tasks that are repetitive, short-term tasks that don't need tracking
[2024-08-20 Tue 20:26]
- what is reference used for :: for misc, small tasks, updates, etc., everything that don't need tracking (*still need proper commit message and tags*, for references)
** Phase 1 (0). MVP, architecture definition and design, first successful tests (unit, regression, non-reg), and first booking
- YTA001 :: studies: *1A and business centred*: testing the water of the business, make basic successful CRUD requests to 1A (all CRUD), but do not focus on specifics of the response => trade-off MVP (simple product that generates whatever small benefit) and solid design (sustainable product, open for extensions, with reliable CI/CD, and good documentation for any stakeholder: a customer, or any other user)
  + clearly identify and define what's the target niche ::
    - what is the proposed product and its benefits (compared to existing)
    - who are the customers, their needs, their behaviour, etc. (supplier should be 1A in the beginning)
    - first rough measurement of the effort of building YTA
    - what does YTA costs (intermediaries such as consolidators, per transactions incurred fees, etc.)
    - how does it profit (direct fees, commissions, etc.)
  + suppliers and intermediaries ::
    - 1A of course as the main server/broker/intermediary
    - need for travel agency's consolidators or hosts ?
      + seems required for ticket validation and issuance (does 1A API act as a consolidator/host ?)
      + checkout available options, their prices, support, sustainability, trustfulness, etc.
        - when selecting don't forget taking into account the result of study on the target niche (eg: select consolidator more suited to the region: east Africa, etc.)
  + what about settlements (settlement strategy phase 1) ::
    - put in place a basic settlement policy, ideally with extension strategy in mind ::
      + how to manage complaints:
        - first should be explicitly express in a written message (automatic/forward?) on refunds/no-show/etc.
  + record cost and risk of a TA, for reporting and business presentations
  + paper work: (country specific) compliance and regulations on the sector
  + visit 1A API, be acquainted to its basic/main functional/technical flow
  + what are the basic available 1A APIs/entry points
  + competition ? : state of the art, compare results from competitors, and record all possible business added value compared to others
  + YTA basic build: very basic structure, architecture, test (automatic preferable)
  + run first CRUD requests successfully (in TEST environment)
  + at this step *no DB management is defined yet*, if need one, use light one for basic CRUD actions
- YTA001 :: *YTA components centred*, design basic architectures, and technical tools (ci-cd, dotfiles, etc)
  + define :
    - YTA components (and sub-components maybe): basic solid architecture tailored for modularity, maintenance, and monitoring
      + ADAP ::
        - RW ::
        - (really no FORM component yet this far)
      + (no OPTI yet this far, but since will)
  + design and best practices ::
    - software design and architecture ::
      + service-oriented architecture (SOA), Event-driven architecture (EDA), Application programming interfaces (APIs), hybrids, etc.
      + Domain-driven design (DDD), Hexagonal architecture, etc.
    - clean code ::
    - testing ::
      + TDD (Test Driven Development), BDD (Behavior Driven Development), acceptance testâ€“driven development (ATDD), etc.
    - misc ::
      + caching and lazy loading, to not frequently fetch data, and avoid ineffective operations
  + open source and open data ::
    - find one or more components (internal or existing) to *permanently* put as open-source
      + preferably one(s) that the broadest public can contribute to (so (sub)components that are not too complex)
      + component(s) that are generic enough to be plugged to different businesses/services/apps/etc.
      + but still, ideally one(s) that do some heavy lifting
    - open-data/source :: open data, source and content that can be freely used, modified, and shared by anyone for any purpose
      + advantages: anyone can contribute => can be used for training and potential hire evaluation for example
  + tools ::
    - dotfiles
    - openAPI, openAPI state graphs ?
    - state graphs
    - clean code compliance:
      + format (always standard, independently of platform: windows, mac, linux, etc.): clang format, editorconfig
      + indentation vs spaces
      + git hooks:
        - enforce yaml files are valid (and when a schema is referenced, that it is compliant)
      + static/dynamic program analysis tools
    - ansible
    - microservices: CNA (for cloud native applications)
      + podman a priori
    - ci-cd: workflows probing phase: to enhance further basic foundations and later refine architectures
      + github actions, gitlab ci, or jenkins ?
    - automated tests:
      + 
    - DB management: SQL/noSQL, if noSQL then prefer couchbase over mongo for example, in order to expand on CNA
      + couchbase XDCR ?
- YTA003 :: *1A API, functional centred, and YTA design*, refine and strengthen built YTA architectures considering already acquired knowledge: functional and technical experiences, issues, design encumbrance, optimisation impediments, new investigation, and technical tools considerations (ci-cd, dotfiles, etc) , etc.
  + visit further 1A API contract, study (complete section [[*\[DRAFT\] Studies findings (various findings, draft version before it is validated and put in specs/documentation pages)][[DRAFT] Studies findings]]), compare, enrich
    - start documenting the product catalogue ([[*Products catalogue][Products catalogue]]) of YTA with first product ideas, just some basic to start with
    - know and complete vocabulary/lexicon into [[*Glossary][Glossary]] section from API contract, products, domain based terminology, etc.
      + some services/products to checkout for:
        - offers (vs shopping and pricing), post-booking, re-booking, redemption,
        - alliances:
          + advantages of connection based alliances:
            - if connections involve airlines in same alliances, sometimes it is easier/cheaper/more advantageous to leverage more ancillaries/services:
              + more convenient connections, minimised connection delay time (really ??? need more details and sources), disruptions handling, frequent flyer privileges, redemption, priority check-in/boarding, easy ticketing, luggage tracking can be done on same app, etc.)
          + checkout https://www.altexsoft.com/blog/airline-alliances-explained/
    - enrich product catalogue ::
      + results optimisation with popular, simple and straightforward criteria:
        - lowest prices, low number of connections, low travel time, etc.
      + advanced criteria:
        - is there any way of searching and filtering through "good deals": buckled together trip services: flights + hotel + car rental
        - is there any way of refining the results by adding additional criteria to requests: by theme (vacation, honeymoon, etc.), by requirements (visa, easy to visit, administrative requirements, etc.), or any other criteria (number of connections, fastest/cheapest, low expenditure places, low affluence in summer, "jewel" locations: for great but rarely visited places, frequency of flights, etc.)
      + start investigating hospitality market:
        - advantages of selecting flight + hotel (some airlines possess hotels' shares)
        - advantages of hospitality subscriptions (or airlines subscriptions including hospitality advantages)
      + case study: "Broke and Abroad":
        - how are they able to find their deals, can it be emulated to African market, etc.
        - do they have an API to connect to, or data to compare with
        - is it profitable to provide them with new products (checkout more details in YTA-xxx, Phase 4)
      + TODO: collect every findings, add to product catalogue, develop in further phases
  + ADAP ::
    - RW :: should only be completed with more requests
    - FORM :: unless really necessary due to some reason (genericity and modularity requirements, internal components requirements, etc.) do not diverge too much from 1A API data model, they know what they're doing
  + OPTI :: start the design of OPTI, now that have a better functional understanding to detect optimisation improvements, simple design, not yet use of optimisation algorithms
    - build OPTI interface (provided as REST API or internal gRPC calls (remote procedure calls) ?)
    - OPTI as C++ component, not ?
    - OPTI implemented as plugging solvers, or using libraries ?
    - add concept of ranking criteria, to handle multi-objective optimisation, eg: rank offers based on price, luggage, duration, number of stops, available upgrades, etc.
      + known impediment: further computation (and thus wait time) needed when first rank/results/guess don't meet customer's expectation
- YTA004 :: *code oriented*, review *YTA overall components* (including OPTI) for code cleaning, specialisation and optimisation, and based on observations and assessments collected from previous phase (YTA003: design and functional)
  + clean code
  + fine-tune workflow, and all tests according to feedback
  + data collection: caching, kafka vs nats
  + data search and filtering
  + OPTI :: based on design of OPTI sketched in previous stage, review code, implement first optimisation algorithms and unit tests
    - C++ component ?
    - C++ state graphs
  + further technical refactoring on components:
    - 
  + debt phase 1 :: (technical + functional) define ways of handling debt (design, tools, etc.)
    - 
- YTA005 :: *CI/CD oriented*, provide 1A improved "technical for functional" to client with platform stability, security, tools for analytics, surveillance, discussion, issues tracking, delivering, etc.
  + identify improvements for platform stability (not just technical, but also functional: smooth refunds, luggage tracking, etc.), to be used in phase 2 (YTA0x0)
  + put in place monitoring tools and their configurations
  + monitor and alert, KPIs, issues, etc. (checkout grafana, argocd, etc.)
  + issues monitoring and tracking
  + chats
  + security oriented (build basic but solid security foundations)
    - API token, security, etc.
    - passwords management
** Phase 2 (00). maturity and strengthening phase: analysis phase before further business/design/documentation/components/etc. refactoring (here studies mainly). Based on experiences from phase 1 (technical, functional, HR, etc.), review/design security, components, products, etc., an overall review study
[2024-08-17 Sat 17:39]
- YTA010 :: growth centred, but exclusively on *business and "HR" perspective*, do studies based on experience, to determine further growth potential, and resources availability to execute and achieve those steps
  + employees availability
  + capital/budget/fund rising needed ?
  + market ? : how to attract customers, who are they, who are the premium customers, how to take care of them
- YTA020 :: further strengthen technical and security
  + complete security-centered refactoring
    - no secret shared bare anywhere:
      + use secret scanners such as [[https://docs.github.com/en/code-security/secret-scanning/introduction/about-secret-scanning][github security scanner]], checkout [[https://chpk.medium.com/top-10-secret-scanning-tools-4b97410396f4][related pages]] for more information
    - set security policies and ensure that the whole development pipeline is compliant: local environment, tests environments, quality assurance, CI/CD, microservices, Paas, business automation (eg: kogito), etc.
  + stress tests on passwords management
- YTA030 :: preparation for phase 3, studies, exclusively functional, continuity of YTA010, studies on how to strengthen the existing and make the platform sustainable over time
  + settlement strategy phase 2 ::
    - plan a storage format for registering customers' issues tickets (bugs, complaints, refunds, etc.):
      + find system to avoid duplicates (or at least minimise them)
      + required attributes:
        - title, short but clear and succinct, not too generic to catch specificities, but simple and bare enough to understand the issue and apply regex to search/filter
          + => limit on number of characters
        - description, where can give more details
        - number of occurrences
        - level of impact/urgency/priority
        - level of complexity: estimated effort (functionally/technically, or level of dependency)j
      + expected benefits:
        - fix issues by priority/urgency, occurrences, complexity, etc.
        - functional/technical debt (for debt management phase 2)
        - contribution to KPIs
        - better product/features enhancement (fix what lacks/fails in YTA, or from suppliers)
    - improve settlements based on new tools put in place
  + how to further take care of prime customers
  + how to attract more customers, based on the potential of available products and the identified needs of the clients found during phase 1 (YTA003)
  + main original customers are those travelling from/to Africa, but can extend that definition to "African" travellers in general
  + find new features based on advantages provided by different advanced services: user profile, number/type of travellers, ancillaries, etc.:
    - earning miles and points (loyalty),
    - subscriptions,
    - travelling in group/with kids,
    - travel solutions for companies,
    - retailing,
    - etc.
  + if volume of transactions justifies it, can't we use our position as business providers to negotiate for some more other advantages ?
  + enrich further the [[*Products catalogue][Products catalogue]]
    - hotels, car rental, place to visits, etc.
- YTA040 :: continuation of YTA010, exclusively technical studies, preparation for phase 3, after previous functional studies (YTA030) and having some functional prospects to enrich YTA product, these technical studies are aiming at finding technical improvements to optimise resources usage, savings on cost, and detect potential of investments
  + what resources, how should be allocated, to who, how much, etc.:
    - human:
      + hiring
      + training: functional, technical
      + teams:
        + dev
        + devops
        + maintenance team, after-sale
    - technical:
      + platform hosting (physical, virtual), 
    - financial: growth investment
    - logistic: material, office(s), etc
  + OPTI:
    - identify ways of optimising further OPTI:
      + OPTI is supposed to be one optimisation component doing travel specific optimisation work, why not make an optimisation orchestrator that calls a set of optimisation tools from a more general optimisation framework (or sets of libraries) that provides various optimisation algorithms/solver
        - that way can even independently contribute to this framework with not travel related algorithms/tools that can be used somewhere else, for example the Travelling Salesman Problem solver (which might be travel related too, who knows)
          + checkout:
            - https://en.wikipedia.org/wiki/COIN-OR, https://www.coin-or.org/
            - https://en.wikipedia.org/wiki/List_of_optimization_software
            - https://en.wikipedia.org/wiki/OR-Tools
      + multi-objectives optimisation to find better offers,
      + global or local optimiser, both ?
      + use of static libraries ?
        - 
      + AI ?
      + etc.
    - always remember abstraction level of OPTI to allow for *genericity and re-usability* (by WBAPI for example)
  + YTA products internal integration:
    - find ways of linking results from different products/services to add more value to YTA
      + checkout if cannot combine products that are otherwise independent:
        - help customer (1. user profile) choosing alliances (2. alliances and airlines profiles ) based on customer's frequent trips, or alliance's reputation (3. use OPTI for optimisation)
          + OPTI: use each advantages of alliances as weighted variables in objective functions for each alliance => multi-objective problem to solve (pareto)
    - try to patch boarding pass issues when has connections and alliances' practices cannot fix it
  + FinOps
  + debt phase 2 :: refine design and tools for debt management
** Phase 3 (000). maintenance, handovers, professionalisation and division of labour on every main speciality based on effort and knowledge
[2024-08-17 Sat 17:42]
- YTA100 ::
- YTA200 :: 
** Phase 4 (YTA-xxx): position is strongly sustained, look for further opportunities (definitely need for change on version release)
- YTA-000 :: extend products provision
  + prospects:
    - codeshare:
      + find ways of marketing [[https://en.wikipedia.org/wiki/Codeshare_agreement][codeshare]] to airline partners (or even pitches to prospective airlines: direct targets: regional airlines -> African airlines)
        - start with simple types of codeshare (eg: free flow codeshare)
        - from studies, checkout if can do more than just marketing, eg: build a component(s) (ideally independent) around the product
  + how advantageous is it to expand the pool of providers ? (won't it threaten our position with 1A ?): sabre, travelport, others ?
    - check out the pros/cons of each: offers catalogue, retailing, travelling in group advantages
  + how advantageous is it to expand the product on top of providers ? (won't it threaten our position with 1A ?) ?
    - for example, improving on travelport product of seat automatic allocation
    - google is enriching its position into the travel industry, can't it be worthwhile to plug into its service catalogue ?
  + how advantageous is it to expand the type of clients ? (won't it threaten our position with 1A ?):
    - for example, can't we use our knowledge of the travel market to negociate products directly with airlines such as rwandair ?
  + how advantageous is it to expand our type of services ? (won't it threaten our position with 1A ?):
    - for example, can't we use our knowledge or those of our contacts/clients to change our position ? not just as a consumer only, but also as new products providers to our own suppliers: add hotels, car rental, places to visit to 1A catalogue for example
      + in other words, being a broker in both direction
      + what are our type of business:
        - intermediary in just one direction ? : 1A consumer, travelling client provider, or can expand to both direction
    - to goal being to be the "middleman" between our local African clients (hotels, touristic places, ), and GDSs
- YTA-001 :: prospect/extend to more (business) opportunities
  + adapt product(s) to market outside of the one originally intended (Africa centred to more regions)
- YTA-002 :: end-game extension (goal): make YTA as less dependent from GDSs as possible (remove intermediaries for more freedom/flexibility)
  + direct link to IATA ? (checkout their services and requirements)
- reminder :: update [[*what's our business position in the travelling market][section: "what's our business position in the travelling market"]], and when done: update planned destination section, and clear draft subsection
* [DRAFT] Studies findings (various findings, draft version before it is validated and put in specs/documentation pages)
[2024-08-07 Wed 21:40]j
** notes
- name ::
  + YTA ::
    - Your Travel agency
    - YTA's a Travel Agency (recursive name as for "GNU")
    - Yawe Travel Agency
    - Yearning Travel Agency
** advantages of having a TA
[2024-07-06 Sat 01:54]
** advantages of using a TA (a "middle man", that can also be used as a selling marketing argument)
[2024-07-06 Sat 01:55]
- sources ::
  + https://www.quora.com/What-is-the-advantage-of-using-Amadeus-GDS-system-for-travel-agencies
- advantages (some) ::
  + range of travel content, ancillaries, and additional related content :: (accommodation, car rental, etc.)
  + real-time updates ::
  + efficiency, productivity, global reach :: TAs can streamline their workflow by using GDSs and save time on manual tasks such as globally checking multiple websites for availability and pricing
  + booking flexibility ::
    - TAs can customize travel itineraries based on their customers' preferences
    - TAs can easily make changes to bookings, issue tickets, and handle cancellations through the system.
  + reporting and analysis ::
    - *provide (sell and market) customers' product* and insight to airlines/GDSs
    - analysis tools for potential track of enhancement/improvement
      + => need for professional analysts
  + support and training ::
** YTA revenue
[2025-06-04 Wed 23:48]
- generating revenues with a TA :: (an OTA, or any other TA)
  + type of revenues ::
    - direct fees :: customer pays fees
    - provider fees :: the provider is paying fees over the volume of sold products
- YTA revenue :: 
  + 1st phase :: generate revenue through the built OTA, at first through a traditional TA. The goal is to give value to YTA API
  + later phases :: ?, unknown for now, maybe use knowledge gathered to built services that integrate to PSS and Nevio, i.e. native single record, the "order model"
** what's our business position in the travelling market
[2024-08-24 Sat 18:45]
** Miscellaneous
- main GDS: Amadeus, Sabre, Travelport
* Features (MVP)
[2024-08-07 Wed 21:37]
* Data models
[2024-08-07 Wed 21:41]
** Products catalogue
* Components
[2024-08-07 Wed 21:46]
** ADAP
[2024-08-07 Wed 22:03]
- notes ::
  + ADAP for "Adaptor", a bridge to 1A API, the interface to amadeus public API
    - should completely be data and model oriented, and split into two:
      + *RW*: one part *only* just gathering and maybe adding some decorators specific to the provider:
      + *FORM*: the other part adapting the data from the providers to YTAPI, and, if necessary, also the one adapting specific models into more generic ones that can be agnostically be used by YTA
  + ADAP: a compound of components, one service that can be considered as a global group of microservices performing one business objective: providing an adapted API that links to 1A API
  + components in ADAP:
    - FORM :: a formatter/wrapper of data that are exchanged with 1A (data from/to *RW* really)
      + ==FORM== is wrapping 1A data to add more flexibility to be easily used internally by other YTA components (eg: OPTI)
      + it's also providing the format used outside of YTA (through YTAPI entry point)
      + FORM also interfaces 1A API resources with respect to some needs,eg:
        - process (wrap/filter/hide) some errors
        - restrict/hide some resources that should not yet appear in the product (for example, for confidentiality reasons deactivate a feature that is not ready yet, that is going through an asset development)
      + error management ::
        - FORM is in charge of wrapping 1A errors, or return YTA specific errors
    - RW :: for Reader-Writer, the actual direct link/interface/bridge to 1A
      + component pulls/pushes 1A formatted requests from/to ==FORM==
*** FORM
**** data models
**** error management
[2024-08-18 Sun 19:03]
*** RW
** OPTI
- OPTI for "Optimiser": a set of libraries (or framework?) to optimise and perform efficient search in data returned by ADAP
- OPTI: is provided as a micro-service (can a library be more
  efficient even through gRPC communication ?). So, still means that
  interface (within/without OPTI) that communicates
  ((de-)serialisation ?) -- i.e. exchange external inputs/outputs,
  calls/requests, from/to OPTI -- has to be implemented
  + [TODO] : interface provided as a REST API or internal gRPC calls (remote procedure calls) ?
- c++ component
** YTAPI (orchestrator, YTA entry point)
[2024-08-18 Sun 17:10]
- entry point of the overall platform, the orchestrator that receives and send all requests to/from YTA platform
* Architectures and workflows
[2024-08-07 Wed 21:41]
- HLS services ::
  + Overall ::
    #+begin_src dot :file ../images/yta_services.png :cmdline -Kdot -Tpng :exports both :cache yes
    digraph G {
      rankdir="LR"; // position left to right
      subgraph cluster_0 {
        style=filled;
        color=lightgrey;
        edge [dir="both"];
        node [style=filled,color=white];
        buff [label="",style=invis];
        YTAPI -> ADAP;
        // ugly trick using hidden elements to improve display
        YTAPI -> buff -> ADAP [style=invis];
        YTAPI -> OPT -> ADAP;
        label = "YTA";
      }
      subgraph cluster_1 {
        ama [label="1A API"];
        label = "1A";
      }
      subgraph cluster_2 {
        style=dashed
        additionalgds [label="?",style=dashed];
        label = "?";
      }
      ADAP -> ama;
      ADAP -> additionalgds [style="dotted"];
    }
    #+end_src

    #+results[aa7bba1d80a7d8ade56619c1ec3a67c25c02f5d4]:
    [[file:../images/yta_services.png]]
  + ADAP :: an adaptor of a provider GDS data models, consists (so far) of: FORM (formatter/wrapper of data that exchanged with provider (data from/to *RW*) + RW ("Reader-Writer", the actual proxy to 1A, or any other provider)
    #+begin_src dot :file ../images/adap_libs.png :cmdline -Kdot -Tpng :exports both :cache yes
    digraph G {
      rankdir="LR"; // position left to right
      subgraph cluster_dummy {
        style=invis;
        emptynode [label="",style=invis];
      }
      subgraph cluster_0 {
        style=filled;
        color=lightblue;
        edge [dir="both"];
        node [style=filled,color=white];
        buff [label="",style=invis];
        FORM -> RW_1A;
        RW_x [style="dashed,filled",color=white];
        FORM -> RW_x [style="dotted"];
        label = "ADAP";
      }
      subgraph cluster_1 {
        color=lightgrey;
        ama [label="1A API"];
        label = "1A";
      }
      subgraph cluster_2 {
        color=lightgrey;
        style=dashed
        additionalgds [label="?",style=dashed];
        label = "?";
      }
      emptynode -> FORM [dir="both",label="OPT,YTAPI"];
      RW_1A -> ama;
      RW_x -> additionalgds [style="dotted"];
    }
    #+end_src

    #+results[a57c17d4a60b63f3f8e71dcdc8b6d437a62598d9]:
    [[file:../images/adap_libs.png]]

* Glossary
[2024-08-23 Fri 22:09]
** Per product level
*** Shopping
[2024-08-23 Fri 22:19]
*** Pricing
[2024-08-23 Fri 22:20]
*** Offers
[2024-08-23 Fri 22:20]
*** Booking
- redemption
*** Post Booking
*** Ticketing
*** Aftersales
[2024-08-23 Fri 22:19]
[2024-08-23 Fri 22:19]
* YTA API documentation
[2024-08-24 Sat 18:51]
** technical documentation: see [[*YTAPI (orchestrator, YTA entry point)][YTAPI (orchestrator, YTA entry point)]]
* About YTA
[2024-08-24 Sat 18:46]
** what's our business position in the travelling market (what are the type of services we provide to our clients)
* [PUBLIC] About YTA
[2024-08-24 Sat 18:32]
** Introduction
[2024-08-24 Sat 18:39]
Hello World, we are YTA, Your Travel agency, as in GNU's own tradition: YTA's a Travel Agency :)
** Products and services
** Partners
[2024-08-24 Sat 18:32]
** Demos
[2024-08-24 Sat 18:34]
* Prospects (potential improvements)
[2024-08-07 Wed 21:37]
* Acronyms
[2025-05-24 Sat 21:26]
- HLS :: High Level Solution
