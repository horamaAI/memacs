# -*- mode: org -*-
#+TITLE: project: application probing data from world bank api
#+SETUPFILE: ~/set-up-files/basic-setups.org
#+LANGUAGE: en
#+OPTIONS: timestamp:t
#+DESCRIPTION: Java back-end project for probing data from the world bank api (gradle, angular, spring)
#+KEYWORDS: WBAPI org-mode Emacs organization GTD getting-things-done git

* Notes
- sources ::
  + https://datahelpdesk.worldbank.org/knowledgebase/topics/125589-developer-information
  + Data Catalog API :: provides information about the numerous development-relevant datasets available through the world Bank Data Catalog (https://datacatalog.worldbank.org/)
    - example ::
      + Statistical Performance Indicators :: https://datacatalog.worldbank.org/search/dataset/0037996/Statistical-Performance-Indicators
      + energydata.info :: https://energydata.info/
      + Library Network :: catalog of open, free, and fee-based online databases for world bank group and international monetary fund staff, https://library.worldbankimflib.org/
    - can checkout some of their already implemented apps too :: https://energydata.info/apps
      + eg: https://www.urbanperformance.in/up-improvement, https://rezoning.energydata.info/, etc.
      + some source codes are also available: https://github.com/kartoza/rezoning-2-project, https://github.com/energy-data/nzt-electrification/tree/master, https://github.com/UPTechMX?tab=repositories
      + Open Finances :: 
    - provides also "databank access" to directly visualize the data, eg: statistical performance indicators databank access: https://databank.worldbank.org/source/statistical-performance-indicators-(spi)
    - all those data are already (should) available through the world bank API
- World Bank APIs provide access to various types of data and databases :: ([[https://datahelpdesk.worldbank.org/knowledgebase/articles/889386-developer-information-overview][source]])
  + Indicators API :: provides programmatic access to time series development data and metadata.
  + Data Catalog API :: provides information about the thousands of development-relevant datasets available through the [[https://datacatalog.worldbank.org/home][World Bank Data Catalog]]. [[https://datahelpdesk.worldbank.org/knowledgebase/articles/902049-data-catalog-api][Learn More]].
  + Projects API :: provides access to [[http://projects.worldbank.org/][World Bank operations data]], i.e., active, pipeline and closed projects implemented in countries and around the world. [[http://search.worldbank.org/api/v2/projects][Learn More]].
  + Finances API :: provides programmatic access to World Bank financial data (loans, credits, financial statements, etc) delivered on the [[https://finances.worldbank.org/][World Bank Finances]] platform. [[https://dev.socrata.com/][Learn More]].
  + Climate Data API :: provides access to historical and modelled climate data from the [[http://climateknowledgeportal.worldbank.org/][Climate Knowledge Portal]]. [[https://datahelpdesk.worldbank.org/knowledgebase/articles/902061][Learn More]].
- limitations on data requests :: to avoid server overload, requests for the entire database are not possible in one query. Data calls are restricted to 15,000 data points per call including null values.
- third Party Apps :: many [[https://data.worldbank.org/products/third-party-apps][third party applications]] have already been developed, including integration modules for Drupal, R, Python and STATA. Example: Google’s [[http://www.google.com/publicdata/overview?ds=d5bncppjof8f9_][Public Data Explorer]] uses Google tools, including motion charts, to visualize and explore data from the World Bank and many other providers
** WB indicators API Documentation
- notes ::
  + provides access to nearly 16,000 time series indicators. Most of the indicators are available online through tools such as [[https://databank.worldbank.org/][Databank]] and the [[https://data.worldbank.org/][Open Data website]]. Many data series date back over 50 years, and can be used to create interesting applications.
  + to this date, use of version 2 of the Indicators API, v1 release was discontinued in 2020
  + the Indicators API provides access to over 45 databases, including:
    - World Development Indicators :: http://datatopics.worldbank.org/world-development-indicators
      + primary World Bank collection of development indicators, compiled from officially recognized international sources. Presents the most current and accurate global development data available, includes national, regional and global estimates
    - International Debt Statistics :: https://data.worldbank.org/products/ids
    - Doing Business :: http://www.doingbusiness.org/
    - Human Capital Index :: http://www.worldbank.org/en/publication/human-capital
    - Subnational Poverty :: http://databank.worldbank.org/data/reports.aspx?source=subnational-poverty
    - And many more :: https://api.worldbank.org/v2/sources
  + WB API basic call structure :: https://datahelpdesk.worldbank.org/knowledgebase/articles/898581
  + knowledgebase :: https://datahelpdesk.worldbank.org/knowledgebase
** WB's V2 indicators API
[2024-02-26 Mon 23:47]
- notes ::
  + need to place 'v2' in the call :: example: http://api.worldbank.org/v2/country/all/indicator/SP.POP.TOTL
  + improvements and enhancements ::
    - sources :: https://datahelpdesk.worldbank.org/knowledgebase/articles/1886674-new-features-and-enhancements-in-the-v2-api
    - improved metadata in responses for countries and regions for example that can return :
      + ISO 3 and ISO 2 codes for all countries along with country name, region, admin region, income level, lending type, capital city and geographical co-ordinates.
      + Both World Bank codes and ISO 2 codes for Region, Admin Region, Income Level and Lending Type
    - responses in JSON format are available by using ==format=json== in the API call, eg: http://api.worldbank.org/v2/country/all/indicator/SP.POP.TOTL?format=json
    - multiple indicators data :: Data can be queried for multiple indicators from a particular data source by providing source ID and indicator codes separated by ==;== (semicolon)
      + ex: http://api.worldbank.org/v2/country/chn;ago/indicator/AG.AGR.TRAC.NO;SP.POP.TOTL?source=2&format=json, returns different indicators for china and angola
      + Note: A maximum of 60 indicators can be included with a maximum of 1,500 characters allowed between two /’s (back-slashes). A maximum of 4,000 characters are allowed in the entire URL.
    - JSONstat :: simple, lightweight JSON dissemination format best suited for data visualization, mobile apps or open data initiatives that has been designed for all kinds of disseminators.
      + use ==format=jsonstat== to returns a JSONstat response
      + ex: http://api.worldbank.org/v2/country/all/indicator/SP.POP.TOTL?format=jsonstat, to return JSONstat data about population total (=="WDI/dimension/series/category/label/SP.POP.TOTL": "Population, total"==) of all countries
    - downloads :: query responses can be downloaded in either zipped CSV or EXCEL format by using the ==downloadformat== query string, eg: http://api.worldbank.org/v2/country/ind/indicator/AG.AGR.TRAC.NO?source=2&downloadformat=excel to download xls file that contains data, country metadata, and indicator metadata worksheets.
      + can download indicator data in either List or Table format. The query string ==dataformat== is used to download the indicator data as a list, with the years in either rows or columns.
        - this query string can work together with ==downloadformat== query string, eg: http://api.worldbank.org/v2/country/usa/indicator/sp.pop.totl/?downloadformat=excel&dataformat=table.
          + ==dataformat=table== returns data in table format (column-wise year), ==dataformat=list== returns data in list format (row-wise year).
** API Calls structure
[2024-02-27 Tue 01:27]
- notes ::
  + 2 type of queries for Indicators API :: URL based structure, and argument based structure
    - argument based, eg: http://api.worldbank.org/V2/country?incomeLevel=LIC
    - URL based, eg: http://api.worldbank.org/V2/incomeLevel/LIC/country
    - both return list of countries with income level classified as low income
  + query strings ::
    - Date and Date-Range :: Date-range by year, month or quarter that scopes the result-set.
      + date :: eg: http://api.worldbank.org/v2/country/all/indicator/SP.POP.TOTL?date=2000, http://api.worldbank.org/v2/country/chn;bra/indicator/DPANUSSPB?date=2012M01
      + date-range :: range indicated with colon ==:== separator, eg: http://api.worldbank.org/v2/country/all/indicator/SP.POP.TOTL?date=2000:2001, http://api.worldbank.org/v2/country/chn;bra/indicator/DPANUSSPB?date=2012M01:2012M08, http://api.worldbank.org/v2/country/CHL/indicator/DP.DOD.DECD.CR.BC.CD?date=2013Q1:2013Q4
      + year-to-date (YTD) :: useful for querying high frequency data and have a more fine-grained and detailed view of the data, eg: http://api.worldbank.org/v2/country/chn/indicator/DPANUSSPB?date=YTD:2022
  + request response features ::
    - delimiters ::
      + range :: with colon (==:==), eg: ~5:10~ for value range from 5 to 10, eg: http://api.worldbank.org/v2/country/chn;ago/indicator/AG.AGR.TRAC.NO;SP.POP.TOTL?source=2&date=2000:2010
      + logical AND :: with semicolon (==;==), eg: ~us;ge~ for United States AND Georgia, eg: http://api.worldbank.org/v2/country/us;ge/indicator/AG.AGR.TRAC.NO
    - response format :: 
      + XML :: ==format=xml==, eg: http://api.worldbank.org/v2/country/all/indicator/SP.POP.TOTL?format=xml
      + JSON :: ==format=json==, eg: http://api.worldbank.org/v2/country/all/indicator/SP.POP.TOTL?format=json
      + JSONP :: ==format=jsonP==, and ==prefix== parameter must be specified, eg: http://api.worldbank.org/v2/country/all/indicator/SP.POP.TOTL?format=jsonP&prefix=Getdata
      + JSON-stat :: ==format=jsonstat==: http://api.worldbank.org/v2/country/all/indicator/SP.POP.TOTL?format=jsonstat, Refer to https://json-stat.org/ for details about jsonstat.
    - download response :: with ==downloadformat== (~downloadformat=[excel|xml|csv]~), eg: http://api.worldbank.org/v2/country/ind/indicator/AG.AGR.TRAC.NO?source=2&downloadformat=xml
    - pagination :: to request through large result-sets, with ==page==, eg: http://api.worldbank.org/v2/country/all/indicator/SP.POP.TOTL?page=2
      + Per_page :: to fix number of results per page (default is 50 results per page), eg: http://api.worldbank.org/v2/country/all/indicator/SP.POP.TOTL?per_page=25
    - others ::
      + MRV (most recent values) :: ==mrv==, fetches most recent values based on the number specified, eg: http://api.worldbank.org/v2/country/chn;ago/indicator/AG.AGR.TRAC.NO?mrv=5&format=json (5 mrvs about "Agricultural machinery, tractors", for chine china and angola)
      + MRNEV (MRV but non-empty) :: ==mrnev==, fetches most recent non-empty values based on the number specified, eg: http://api.worldbank.org/v2/country/chn;ago/indicator/AG.AGR.TRAC.NO?mrnev=5
      + Gap-fill (Y/N) :: ~gapfill=[Y|N]~, works with ==MRV==, fills values if not available, by back tracking to the next available period (max number of periods back tracked will be limited by MRV number), http://api.worldbank.org/v2/en/country/ind;chn/indicator/DPANUSSPF?mrv=7&gapfill=Y
      + frequency :: ~frequency=[Q|M|Y]~, for fetching quarterly (Q), monthly (M) or yearly (Y) values. Works along with MRV, useful for querying high frequency data, eg: http://api.worldbank.org/v2/en/country/ind;chn/indicator/DPANUSSPF?mrv=7&frequency=M
      + Multiple Indicators :: data for multiple indicators can be queried from a single data source by providing the indicator codes separated by ==;== (semicolon), as well as the source ID ('source' are the different sources of data: "Africa Development Indicators", "International Debt Statistics", etc.) :: http://api.worldbank.org/v2/country/chn;ago/indicator/AG.AGR.TRAC.NO;SP.POP.TOTL?source=2
        - note: max of 60 indicators, max of 1,500 characters between two back-slashes (==/==), max of 4,000 chars in the entire URL
      + Footnote :: fetches footnote detail in data calls, ==footnote=y== gives the footnote value for country, indicator and year, eg: http://api.worldbank.org/v2/country/chn/indicator/SL.AGR.EMPL.ZS?footnote=y
- indicator API queries ::
  + /indicators/ represent data like total population, gross national income, energy use, etc.
  + eg: "NY.GDP.MKTP.CD" for GDP. For the full list of indicators: http://api.worldbank.org/v2/indicator?format=json
  + indicator queries return valuable information such as: indicator code, its name, unit used when required, Source ID (eg: World Development Indicators), Source Note, Source Organization, Topic ID (list of topics and their names)
  + to filter out indicators' sources and pick a specific one, its source id has to be provided: eg for source '11' which is 'Africa Development Indicators': http://api.worldbank.org/v2/indicator/NY.GDP.MKTP.CD?source=11, or http://api.worldbank.org/v2/source/11/indicator/NY.GDP.MKTP.CD
  + full list of sources: http://api.worldbank.org/v2/source?format=json
- topic API queries ::
  + topics are high level categories to which all indicators are mapped: Agriculture & Rural Development, Education, Trade, etc.
  + topics lists ::
    - list of all topics: http://api.worldbank.org/v2/topic
    - list selected topics, or aggregate selections: http://api.worldbank.org/v2/topic/5, http://api.worldbank.org/v2/topic/5;11
    - list indicators under a specific topic: eg: topic 'Energy & Mining' (id 5): http://api.worldbank.org/v2/topic/5/indicator, or http://api.worldbank.org/v2/indicator?topic=5
- advanced API queries ::
  + allow to retrieve data for any combination of multidimensional data sources and multidimensional concepts
  + advanced Data Queries can be made through the Metadata API (see next section)
  + example of response to advanced API query:
    #+begin_src xml
    <wb:data xmlns:wb="http://www.worldbank.org" page="1" pages="1" per_page="50" total="1" lastupdated="2011-12-15">
      <wb:source id="2" name="World Development Indicators">
        <wb:data>
          <wb:variable name="Country" id="IND">India</wb:variable>
          <wb:variable name="Series" id="SP.POP.TOTL">Population, total</wb:variable>
          <wb:variable name="Time" id="YR2011">2011</wb:variable>
          <wb:value>1241491960</wb:value>
        </wb:data>
      </wb:source>
    </wb:data>
    #+end_src
  + elements breakdown:
    - ==Source==: about the source database (~<wb:source id="2" name="World Development Indicators">~)
      + Source queries ::
        - following data source information will appear, when available, in response of source queries:
          + Date last updated
          + Source ID and Name
          + WB Source Code
          + Source description and URL
          + Data availability: “Y” means indicator data is available for that source; “N” means it is not available
          + Meta data availability: “Y” means Meta data is available for that source; “N” means it is not available
          + Number of concepts
        - full list of sources: http://api.worldbank.org/v2/source?format=json
          + for a specific source: http://api.worldbank.org/v2/source/2
    - ==Concept==: also known as ==Dimensions== or ==combinations of dimensions==, eg: Country, Series, Time, etc. (~<wb:variable name="Country">~)
      + Concept queries ::
        - fetches following data, when available, about concepts of a specific source:
          + Source ID and name
          + Concept ID
          + Concept Name
        - to list of all available concepts from a given source: http://api.worldbank.org/v2/sources/2/concepts/data (Country, Series, and Time for 'World Development Indicators' of source id '2')
          + for source 57 'WDI Database Archives' for example, the concept is only Country (http://api.worldbank.org/v2/sources/57/concepts/Country/data)
    - ==Concept Variables==: also known as ==Dimension Variables==, Concept Variables belong to Concepts, eg: High Income, East Asia & Pacific, United States of America, 2012, etc. (~<wb:variable name="Country" id="IND">India</wb:variable>~)
      + Concept variable queries ::
        - returns the following information, when available, about concept variables of a specific source:
          + Source ID
          + Concept ID and Name
          + Variable ID and Name
        - to request a list of all available variables in a concept: http://api.worldbank.org/v2/sources/2/country/data
        - eg: to retrieve a specific concept variable detail for a source (in this example concept ID is “Country”, Country variable id is “ALB”, and Source is 'World Development Indicators' or source 2): http://api.worldbank.org/v2/sources/57/country/ALB/data
    - ==Data==: data for any combination of Source and Concepts, eg: 12341491960, etc. (~<wb:value>1241491960</wb:value>~)
  + advanced API queries ::
    - data can be retrieved for any combination of Sources and Concepts
      + eg: request to provide data for Country ALB (Albania), Series AG.AGR.TRAC.NO ( Agricultural machinery, tractors), Time 1975, Version 1997 Apr.: http://api.worldbank.org/v2/sources/57/country/ALB/series/AG.AGR.TRAC.NO/time/yr1975/version/199704
      + list series from a given source: http://api.worldbank.org/v2/sources/57/series
        - in given example, concepts: 'sources', 'country', 'series', 'time', and 'version' are all keywords
      + can set 'all' value to concepts, eg in the following where time is 'all': http://api.worldbank.org/v2/sources/57/country/ALB/series/AG.AGR.TRAC.NO/time/all/version/199704/data
      + can get responses in Json-stat format: http://api.worldbank.org/v2/sources/57/country/ALB/series/AG.AGR.TRAC.NO/time/all/version/199704/data?format=jsonstat
      + process to built advanced query:
        - for a given source, checkout the series provided by the source: http://api.worldbank.org/v2/sources/1/series, eg: select for example 'IC.CRED.ACC.CRD.RK' (Rank: Getting credit)
        - checkout the available Concepts for the needed country (http://api.worldbank.org/v2/sources/1/country/RWA/series/IC.CRED.ACC.CRD.RK), eg: select for example concept time '2019' (yr2019), and no concept 'version'
        - and you get request to provide data for country RWA, series IC.CRED.ACC.CRD.RK, time 2019 (No concept version for source), which is value '4': http://api.worldbank.org/v2/sources/1/country/RWA/series/IC.CRED.ACC.CRD.RK/time/yr2019
- metadata advanced API queries ::
  + Metadata :: data about data
  + provides users with more information about the data such as where the data comes from, the way in which the data is measured, and the frequency with which the data is collected, just to name a few
  + for example, for the indicator Population (total), SP.POP.TOTL, the metadata includes the indicator’s long definition, its sources, its periodicity, its methodology, etc.
  + metadata queries definitions ::
    - eg of metadata query response: http://api.worldbank.org/v2/sources/2/country/jpn/metadata (lists metadata available for concept 'Country' and for the country concept of value JPN)
      #+begin_src xml
      <wb:metadata xmlns:wb="http://www.worldbank.org" page="1" pages="1" per_page="5000" total="24">
      <wb:source id="2" name="World Development Indicators">
      <wb:concept id="Country">
      <wb:variable id="JPN">
      <wb:metatype id="2-alphacode">JP</wb:metatype>
      <wb:metatype id="BalanceofPaymentsManualinuse">IMF Balance of Payments Manual, 6th edition.</wb:metatype>
      <wb:metatype id="CurrencyUnit">Japanese yen</wb:metatype>
      <wb:metatype id="GovernmentAccountingconcept">Consolidated central government</wb:metatype>
      <!-- ... -->
      </wb:variable>
      </wb:concept>
      </wb:metadata>
      #+end_src
    - Source, Concept :: (as already seen previously in section 'advanced API queries')
      + eg: http://api.worldbank.org/v2/sources/2/concepts/metadata
      + or requesting specific concept detail (concept ID: ==country==, source: 2): http://api.worldbank.org/v2/sources/2/concepts/country/metadata
    - Metatype :: (eg: ~<wb:metatype id="2-alphacode">JP</wb:metatype>~ of concept 'country' Japan)
      + retrieves the types of Metadata available
      + Metatypes *belong to Concepts*, and each concept may have one or more Metatypes
      + Metatype calls retrieve lists of data types available for the given source
      + Metatype calls will return (when available):
        - Source ID
        - Concept ID
        - Metatype ID and Details (name and description)
      + examples of metatypes: Region, Income Group, Periodicity, Source, etc.
      + Metatypes queries examples:
        - list metatypes available for source 2: http://api.worldbank.org/v2/sources/2/metatypes (grouped by concepts: Country, Footnote, Series, etc.)
        - list metatypes available for source 2, and concepts 'Country' and 'Series': http://api.worldbank.org/v2/sources/2/concepts/country;series/metatypes
    - Metadata ::
      + retrieves Metadata for any combination of Source, Concept and Metatype
      + eg of metadata: High Income, East Asia & Pacific, United States of America, 2012, etc.
      + Metadata queries ::
        - eg1: list metadata for Income Group in the United States and Japan: http://api.worldbank.org/v2/sources/2/country/usa;jpn/metatypes/incomegroup/metadata
          + ==sources==, ==country==, ==metatypes==, and ==metadata== are keywords
          + ==usa;jpn== belongs to the concept ==country== and ==incomegroup== belongs to ==metatypes==
        - eg2: list all metadata for concept 'country' of value jpn: http://api.worldbank.org/v2/sources/2/country/jpn/metadata
        - eg3: retrieve metadata for combination of concepts (in this case, concepts 'country' and 'series', of values 'United States' and 'Japan' for concept country, and series SP.POP.TOTL: http://api.worldbank.org/v2/sources/2/country/usa;jpn/series/SP.POP.TOTL/metadata
    - Search queries ::
      + to retrieve Metadata by using keywords in the query string, eg: http://api.worldbank.org/v2/sources/2/search/solid%20fuel, http://api.worldbank.org/v2/sources/2/search/burundi
      + search calls will return (when available):
        - Source ID
        - Concept ID
        - Variable ID
        - Metatype ID and detail
      + will return found metadata, their variables, and the concepts they belong to. The result depends also on the source (eg: results for source 57 http://api.worldbank.org/v2/sources/57/search/burundi, might be different than those for source 2 http://api.worldbank.org/v2/sources/2/search/burundi)
      + note: use ==%20== to add spaces, eg: http://api.worldbank.org/v2/sources/2/search/solid%20fuel
      + more search queries ::
        - do a search within a specific *concept*: search within concept 'country' for metadata values that contain 'united': http://api.worldbank.org/v2/sources/2/concepts/country/search/united
        - search within a specific *metatype*: search within Metatype 'region' for values that contain 'south': http://api.worldbank.org/v2/sources/2/metatypes/region/search/south
    - can still download metadata, metatypes, and metadata descriptions with ==downloadformat==, examples:
      + download excel of metadata for countries usa and jpn, and of series 'Population, total': http://api.worldbank.org/v2/sources/2/country/usa;jpn/series/SP.POP.TOTL/metadata?downloadformat=excel, 
      + download csv of results of search within concept 'Country-Series' of value 'AFG~1.1_YOUTH.LITERACY.RATE': http://api.worldbank.org/v2/Sources/34/Country-Series/AFG~1.1_YOUTH.LITERACY.RATE/metadata?downloadformat=csv
- some more examples :: 
  + requesting country data :: 
    - list all countries :: http://api.worldbank.org/v2/country
      + various info attached such as: Region, Income Level, Lending Type, Capital, Coordinates, etc.
    - list data for brasil in json format :: http://api.worldbank.org/v2/country/br?format=json
    - retrieve the country name of Vietnam in Vietnamese language :: http://api.worldbank.org/v2/vi/country/vn
  + aggregation of API queries ::
    - possible to aggregates by region, income level, lending group, etc. Just need to use appropriate code in place of full country name, eg: can request GDP for specific country, Brazil for example (http://api.worldbank.org/v2/country/BRA/indicator/NY.GDP.MKTP.CD?format=json), or retrieve GDP for Latin America and Caribbean region (LCN): http://api.worldbank.org/v2/country/LCN/indicator/NY.GDP.MKTP.CD?format=json
    - fetch some code definitions ::
      + definition list for all region codes: http://api.worldbank.org/v2/region?format=json
      + list of all Income Level code definitions: http://api.worldbank.org/v2/incomelevel
        - eg: 'UMC' for Upper middle income
      + list of all Lending Type code definitions: http://api.worldbank.org/v2/lendingtypes
      + can also retrieve list of definitions for specific regions, income levels or lending types: eg: http://api.worldbank.org/v2/incomelevel/UMC
      + querying a country shows which aggregate groups it belongs to: http://api.worldbank.org/v2/country/BRA?format=json (id region: LCN)
      + can also aggregate by separating codes with semicolons (==;==): http://api.worldbank.org/v2/lendingtype/IBD;IDB?format=json
      + can filter countries to see countries in a specified aggregate: http://api.worldbank.org/v2/country?region=LCN, http://api.worldbank.org/v2/country?incomelevel=UMC, http://api.worldbank.org/v2/country?lendingtype=IBD
** SDMX API queries
- notes ::
  + SDMX API :: preferred standard for statistical data exchange in the UN and in many other statistical organizations (such as ==Worldbank==, or ==databank==). The standard defines, amongst other things, a common data model and standardized data access interfaces (APIs).
    - ISO standard designed to describe statistical data and metadata, normalise their exchange, and improve their efficient sharing across statistical and similar organisations.
  + In the SDMX API, users can give various dimensions as a parameter in the URL like series code, country code, or frequency and time range etc., and the resulting data can be downloaded as XML or JSON.
- basic call structure ::
  + two types of requests :: to retrieve the metadata, and to retrieve data
  + response formats ::
    - SDMX-ML :: of two types
      + generic schema :: default format, with size a bit greater when compared to other formats
      + structure specific schema :: more suited for processing of large data
        - need to modify HTTP request header field ~Accept: application/vnd.sdmx.structurespecificdata+xml~ on the SDMX data query request (seems not to always work, but ~application/xml; charset=utf-8~ mostly does)
    - Json :: need to modify the HTTP request header field ~Accept: application/vnd.sdmx.data+json;version=1.0.0-wd~ on the SDMX data query request. (seems not to always work, maybe because of the size, same for ~application/json; charset=utf-8~)
  + metadata requests :: (to get DataFlow, Code List and DSD (data structure definition))
    - data flow :: end-point to retrieve the unique dataset code for World Bank datasets
      + URL  :: http://api.worldbank.org/v2/sdmx/rest/dataflow
      + method :: ~GET~
      + response format :: xml
      + Success Response :: ==HTTP Response Status Code: 200, Content: The response has the data flow code to access the World Bank datasets.==
    - code list :: endpoint retrieves the code list for the WDI dataset.
      + URL  :: http://api.worldbank.org/v2/sdmx/rest/codelist/wb
      + method :: ~GET~
      + response format :: xml
      + Success Response :: ==HTTP Response Status Code: 200, Content: The response has the code list available for various dimension in WDI dataset.==
    - Data Structure Definition (DSD) :: API retrieves the Data Structure Definition (DSD) for the WDI dataset
      + URL  :: http://api.worldbank.org/v2/sdmx/rest/datastructure/wb
      + method :: ~GET~
      + response format :: xml
      + Success Response :: ==HTTP Response Status Code: 200, Content: The response has the Data Structure Definition (DSD) for WDI dataset==
  + Data requests ::
    - notes ::
      + used to download data in Generic, Compact and JSON format
      + users can request data for a country and series over a period, however data points in a single query cannot exceed more than 15,000 data points
      + in data calls, the dimensions are separated by ==.== (dot)
    - url :: ~http://api.worldbank.org/v2/sdmx/rest/data/<dataset%20id>/../?startperiod=&endPeriod=~ (checkout parameters in following section 'Url parameter')
    - method :: ~GET~
    - URL Parameter :: (for most of the parameters, checkout http://api.worldbank.org/v2/sdmx/rest/codelist/wb for the needed codes)
      + Dataset id :: for example, 'WDI'
      + Freq :: possible value for frequency is 'A'. If no value is specified, it is considered as all frequencies
      + Series :: Series code (Refer to WDI DSD for list of series names and codes)
      + Country :: ISO Country code
      + StartPeriod :: year parameter and can have values from 1960 onwards. If ignored, data for all available years will be returned.
      + EndPeriod :: year parameter and can have values from 1960 onwards. If ignored, all data available from the start period to the latest available years will be returned.
    - Success response :: ==HTTP Response Status Code: 200  Content: The response has the following information. - Series  - Country  - Time==
    - Error response :: response contains the result value of the Country, Series, Time and Frequency combination. If any of the dimensions are not specified in the request URL, all the data related to that dimension will be retrieved in relation to the other dimensions.
      + Error Response :: ==Could not find dataflow and/or DSD related with this data request==
    - Response format :: XML- SDMX-ML 2.1 generic schema, XML- SDMX-ML 2.1 structure specific schema or JSON (really ?)
    - examples ::
      + EG_ELC_ACCS_RU_ZS
      + request one country, one series and one year :: http://api.worldbank.org/v2/sdmx/rest/data/WDI/A.SP_POP_TOTL.AFG/?startperiod=2011&endPeriod=2011
        - one country 'AFG' for Afghanistan
      + request all countries, one series and one year :: http://api.worldbank.org/v2/sdmx/rest/data/WDI/A.SP_POP_TOTL./?startperiod=2011&endPeriod=2011
      + request all series, one country and one year :: http://api.worldbank.org/v2/sdmx/rest/data/WDI/A..AFG/?startperiod=2011&endPeriod=2011
      + request one country, one series and a range of years :: http://api.worldbank.org/v2/sdmx/rest/data/WDI/A.SP_POP_TOTL.AFG/?startperiod=2010&endPeriod=2015, http://api.worldbank.org/v2/sdmx/rest/data/WDI/A.SP_POP_TOTL.RWA/?startperiod=2010&endPeriod=2020
        - query works for json with header ~Accept: application/vnd.sdmx.data+json;version=1.0.0-wd~
  + For error code numbers refer to :: https://datahelpdesk.worldbank.org/knowledgebase/articles/898620-api-error-codes
          
** Best practices and suggested guidelines
[2024-03-14 Thu 00:19]
- notes :: best practices and tips that can help in making a World Bank API application/library. Not exhaustive.
- caching ::
  + nice to implement a caching layer in your library/application that caches results of calls made to the WB API.
    - For performance: caching API call results makes the application/library to not constantly make calls to the WB API for the same results, it's faster to use requests that are able to be served by a local cache
    - For resource usage: caching API calls generates less traffic, and save bandwidth for both the client and the WB API server
    - For performance: not all requests to the WB API are fast, caching results makes slow calls only for those where the local cache is not yet populated
    - Safety: since the WB API is not guaranteed to always be up, locally cachedhaving results prevent being impacted by disruptions
    - For performance: results do not change very often (data are not added regularly, unlike daily news API or other very timely service), caching provides lots of gain
    - look at the WBAPI Drupal module (https://www.drupal.org/project/wbapi, https://git.drupalcode.org/project/wbapi) as an example of API result caching. Its settings page says that it can cache API results for one day, two days, one week, two weeks, or even permanently.
      + drupal :: free and open-source web content management system written in PHP and distributed under the GNU General Public License
- uptime ::  World Bank API is not 100% uptime guaranteed. Service disruptions can happen, so it's important that your application/library be defensive and handle API downtime gracefully, either with good caching, or aim for graceful failure if the API is not available.
- testing :: one of the best tools to help with testing is a web browser: can view API results directly in the browser.
  + XML results are usually easy to read, but JSON can be difficult as it usually renders as plain text with no formatting, so, use tool to aid with the legibility of JSON results in the web browser itself, such as the Firefox plugin ==JSONView==, which adds line indentation, syntax highlighting, etc.
- other tips ::
  + JSON is usually smaller in size than XML, so prefer using JSON
  + not every call is fast, if you notice a certain slow call, search for alternatives, eg: if need to query an indicator value for the last five years, check whether doing a year range query will be faster than making five separate queries, one for each year.

* Tickets
[2024-02-25 Sun 23:21]
 - WBAPI001: basic structure
