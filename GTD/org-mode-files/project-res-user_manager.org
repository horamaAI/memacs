# -*- mode: org -*-
#+title: Java web programming learnings
#+SETUPFILE: ~/set-up-files/basic-setups.org


* JAVA
** Notes
- Targeted JAVA version: JAVA 17
- IDE used : IntelliJ ::
  + pros :: does lots of stuff for us from elements that are hinted by the dev : (install a small cli java compiler when there is none defined, update external libraries, etc.)
** Compile and run
- JRE :: java runtime environment, that makes it able for java applications to run.
  + The jre is cross platform, it takes standard 'bytecodes' (compiled classes that are OS agnostic), and through the JVM (Java Virtual Machine) and additional standar java libraries, adapt those bytecodes to the local environment.
- JDK :: Java development kit: JRE + compiler, debugger, javadoc, keytool, etc.
- flow :: *.java --[JDK]--> *.class --[JRE]--> execute
- comments ::
  + usual comments :: line comment (==//...==), block comment (==/*...*/==)
  + javadoc comments :: ==/**...*/== : same as block comments, but can be generated as javadocumentation
** Fundamentals
*** Java fundamentals and structural assumptions
**** Structure and conventions
+ naming conventions ::
  - packages ::
    + all lowercase,
    + use of reverse domain name notation to assure global *uniqueness* (there is an authority that makes sure the domain name is not used by someone else) : [domain_extension].[domain_main_name[.more_extension]*][...], eg : org.mydomain
    + add further qualifiers to assure uniqueness within company/group (eg: all code related to searching within domain 'mydomain' can be added to package ==org.mydomain.search==, ie. ==package org.mydomain.search;==)
      - same, the dev group in the sales department could use the following reversed dns ==org.mydomain.sales==
      - furthermore, if the devs in the sales department created an app that manages the sales account, they could use 'accounts management' in the reversed dns ==org.mydomain.sales.accountmanagement== => this avoids collisions in case another department create a sales account application.
  - type names are qualified by their package :: package org.mydomain.sales, qualifies class 'A' that is declared within it, and then, type name of A is now org.mydomain.sales.A (now they're globally unique)
    + when qualified, the executable part of the code is also qualified, ie: instead of running in cli ==java Main==, just run the qualified version ==java org.mydomain.sales.Main==
  - variables naming conventions :: only letters and numbers, no starting with number, camelCase (not start with uppercase)
  - methods :: same as variables
       
*** Variables, types, data type conversions, and operators arithmetics
[2023-11-29 Wed 12:08]
[2023-11-28 Tue 19:32]
**** Operators and types
[2023-11-28 Tue 19:37]
- Variables :: named area of storage (Java strongly typed language)
- primitive types ::
  + primitive types are stored *by value* (copies when assigning)
  + chars :: single unicode char, eg: 'u' or '\u00DA' (for 'u' with accent: \u followed by 4digits hex value of char)
  + integer :: byte (8bits), short (16bits), int (32bits), long (eg: 9L)
  + decimal :: float (32bits, eg: 3.14f), double (64bits, eg: 3.14 or 3.14d)
  + boolean :: true/false (primitive)
    - note ::
      + xor operator ==^== is true only when the two operands are differents (0^1 or 1^0)
      + conditional logical operators (&& and ||) evalueate the right side only when needed (in case of ||, only evaluate right hand side when left is false)
- ==var== "type" :: type then inferred with first assignment, no need then to explicitly define the type of the variable
  + constraints :: need to be assigned when declared, and variable is statically typed (cannot change the type of assigned value), therefore need for cast when assigning a non matching value
- ==final== :: constant variable/attributes/classes/methods
- ==static== :: set what's defined to only one instance of object/class/method/etc., and have persistent lifetime
  + static variables get loaded when class is loaded by ClassLoader, and removed when Classloader used is garbage collected
- operators ::
  + operators precedence :: left to right when equivalent or when tied
    - precedence order :: postfix, prefix, multiplicative (==* / %==), additive (==+ -==)
      - table ::
        +-----+----------+--------------+-------------+
        | 16  | ()       |parentheses   |left-to-right|
        +-----+----------+--------------+-------------+
        |     | []       |   array      |             |
        |     |          |  access      |             |
        +-----+----------+--------------+-------------+
        |     |  .       |  member      |             |
        |     |          |  access      |             |
        +-----+----------+--------------+-------------+
        | 15  | ++       |    unary     |left-to-right|
        |     |          |post-increment|             |
        +-----+----------+--------------+-------------+
        |     | --       |    unary     |             |
        |     |          |post-decrement|             |
        +-----+----------+--------------+-------------+
        | 14  |  +       |  unary plus  |right-to-left|
        +-----+----------+--------------+-------------+
        |     |  -       | unary minus  |             |
        +-----+----------+--------------+-------------+
        |     |  !       |unary logical |             |
        |     |          |     NOT      |             |
        +-----+----------+--------------+-------------+
        |     |  ~       |unary bitwise |             |
        |     |          |     NOT      |             |
        +-----+----------+--------------+-------------+
        |     | ++       |    unary     |             |
        |     |          |pre-increment |             |
        +-----+----------+--------------+-------------+
        |     | --       |    unary     |             |
        |     |          |pre-decrement |             |
        +-----+----------+--------------+-------------+
        | 13  | ()       |     cast     |right-to-left|
        +-----+----------+--------------+-------------+
        |     | new      |    object    |             |
        |     |          |   creation   |             |
        +-----+----------+--------------+-------------+
        | 12  |* / %     |multiplicative|left-to-right|
        +-----+----------+--------------+-------------+
        | 11  | + -      |   additive   |left-to-right|
        +-----+----------+--------------+-------------+
        |     |  +       |    string    |             |
        |     |          |concatenation |             |
        +-----+----------+--------------+-------------+
        | 10  |<< >>     |    shift     |left-to-right|
        +-----+----------+--------------+-------------+
        |     | >>>      |              |             |
        +-----+----------+--------------+-------------+
        |  9  |< <=      |  relational  |left-to-right|
        +-----+----------+--------------+-------------+
        |     |> >=      |              |             |
        +-----+----------+--------------+-------------+
        |     |instanceof|              |             |
        +-----+----------+--------------+-------------+
        |  8  |    ==    |   equality   |left-to-right|
        +-----+----------+--------------+-------------+
        |     |    !=    |              |             |
        +-----+----------+--------------+-------------+
        |  7  |    &     | bitwise AND  |left-to-right|
        +-----+----------+--------------+-------------+
        |  6  |    ^     | bitwise XOR  |left-to-right|
        +-----+----------+--------------+-------------+
        |  5  |    |     |  bitwise OR  |left-to-right|
        +-----+----------+--------------+-------------+
        |  4  |    &&    | logical AND  |left-to-right|
        +-----+----------+--------------+-------------+
        |  3  |    ||    |  logical OR  |left-to-right|
        +-----+----------+--------------+-------------+
        |  2  |    ?:    |   ternary    |right-to-left|
        +-----+----------+--------------+-------------+
        |  1  | =   +=   |  assignment  |right-to-left|
        |     |    -=    |              |             |
        +-----+----------+--------------+-------------+
        |     |*=   /=   |              |             |
        |     |    %=    |              |             |
        +-----+----------+--------------+-------------+
        |     |&=   ^=   |              |             |
        |     |    |=    |              |             |
        +-----+----------+--------------+-------------+
        |     | <<=  >>= |              |             |
        |     |   >>>=   |              |             |
        +-----+----------+--------------+-------------+
        |  0  |    ->    |    lambda    |right-to-left|
        |     |          |  expression  |             |
        |     |          |    arrow     |             |
        +-----+----------+--------------+-------------+
- Type conversion ::
  + implicit :: performed by compiler (eg: long valLong = valInt; // where valInt is explicitly declared as int, said as "widening conversion")
  + explicit :: with cast operator (eg: int valInt = (int) valLong; // where valLong is explicitly declared as long, careful of *side-effects*: precision loss, and compiling errors)
- conditional logic and operators ::
  + ==switch default== cases :: only supported on primitive types: byte, char, short, int, long
    - format :: ==switch(val) {case k0: ...; break;...;default:...;break;}
- arrays :: format : ==type[] = new type[nElements];==, or with list initialization : ==type[] = {ele1, ..., eleN};==
  + size of array :: ==arrayVar.length;==
*** Methods, Class, Objects
[2023-11-29 Wed 14:05]
**** 
*** Algorithms and standard library
- foreach :: ==for(loop-variable : array)==
** Design

** Definitions
- Classloader :: object that is responsible for loading classes
- Class vs Object :: object is an instance of a class, and a Class is its blueprint or template from which the object is created


* project rest user-manager

- Spring Initializr (https://start.spring.io/) to generate a new Spring Boot project. Make sure to include the following dependencies
  * when added dependencies and generated, the resulting ZIP file is an archive of applications is configured with selected choices

- structure of code ::
src/
   main/
      java/
         com.example.myapp/
            controller/
               UserController.java    // expose the REST endpoints for registering and retrieving models details
            dao/
               UserRepository.java    // for CRUDs
            model/
               User.java
            service/
               UserService.java       // business logic
               UserServiceImpl.java
	    aspect/
	       UserAspect.java        // to handle the aspect of logging the method calls
      resources/
         application.properties
   test/
      java/
         com.example.myapp/
            controller/
               UserControllerTest.java
            service/
               UserServiceTest.java
      resources/
         test.properties



#+begin_src org :exports src
Project       : Maven
Language      : Java 11
Springboot    : 3.0.5
Group         : com.peppermint
Artifact      : rest-user-manager
Name          : rest-user-manager
Description   : Simple user input-output manager of users.
Package name  : com.peppermint.rest-user-manager
Packaging     : War
Dependencies :
    Spring Web
    Spring Data MongoDB
    Spring AOP // for Aspect Oriented Programming: programming paradigm that aims to increase modularity by allowing the separation of cross-cutting concerns, and validating inputs
    Lombok
#+end_src

** Notes
*** Miscs
    - Dto :: for "Data Transfer Object", carries data between processes to facilitate communication between two systems (like an API and a server) without potentially exposing sensitive information
      + source :: https://www.baeldung.com/java-dto-pattern
      + context :: OOP environments rely on "calls.", each one a bit like a data lookup, thus requiring both time and processing speed. If programmer not careful, calls can also expose sensitive data, eg :: employee addresses, account numbers, social security numbers, etc.
	- a Dto can help send only the required information, not everything in the database
	- Dtos are objects that carry data between processes in order to reduce the number of methods calls
	- purpose is to reduce roundtrips to the server by batching up multiple parameters in a single call => reduces the network overhead in such remote operations
	- other benefit is the encapsulation of the serialization's logic
	  + serialization :: mechanism that translates the object structure and data to a specific format that can be stored and transferred
	- DTO should just contain data, not business logic
	- how to use Dtos ::
	  + DTOs normally are created as POJOs (Plain Old Java Objects)
	    - only contain storage, accessors and eventually methods related to serialization or parsing
	    - data is mapped from the domain models to the DTOs, normally through a mapper component in the presentation or facade layer
	      + front (html, json, etc.) exchange with presentation layer ::
		- presentation layer ::
		  + Dto only point communicating with front
		  + to request data, Dto goes through *only* the mapper and gathers only the data required for the front
		  + Dto can gather content of different models, eg :: Dto (userName, roleName), combines data from two models: User, and Role
    - binding results :: general interface that represents binding results, extends the interface for error registration capabilities, allowing for a Validator to be applied, and adds binding-specific analysis and model building
    - AOP ::
      + source ::
	- https://www.baeldung.com/spring-aop
	- https://www.baeldung.com/spring-aop-annotation
      + AOPs are a way of adding behavior to existing code without modifying that code
      + eg ::
	- method 'afterReturn' which takes one argument of type Object and logs in that value
	#+begin_src org :exports src
	public class AdderAfterReturnAspect {
	    private Logger logger = LoggerFactory.getLogger(this.getClass());
	    public void afterReturn(Object returnValue) throws Throwable {
	        logger.info("value return was {}",  returnValue);
	    }
	}
	#+end_src
    - Mongo ::
      + basic commands (start, stop, status, etc.) :: https://www.mongodb.com/docs/manual/tutorial/install-mongodb-on-debian/
	- mongosh :: command to run mongodb in cli (default database: 'test')
	  + switch database :: ==use <db>== // swith to database name 'db'
	  + in database, show content :: ==db.<collection>.find( {} )==
	    - eg :: db.user.find( {} ) // show all content from collection user
      + ==@Document(collection = "<name_of_collection_to_use>")== annotation needed by spring to know which mongodb collection to query :: 

*** annotations
    - @RequestBody :: maps the HttpRequest body to a transfer or domain object, enabling automatic deserialization of the inbound HttpRequest body onto a Java object
    - @PathVariable :: can be used to handle template variables in the request URI mapping, and set them as method parameters
      #+begin_src org :exports src
      @GetMapping("/api/employees/{id}")
      @ResponseBody
      public String getEmployeesById(@PathVariable String id) {
        return "ID: " + id;
      }
      #+end_src
      + will extract the templated part of the URI (represented by the variable {id})
    - @Document :: annotation used for the same purpose as @Entity annotation in JPA
    - @SpringBootTest :: creates an application context to be used in a test
*** dependencies
    - ModelMapper :: provides a drop-in solution when our source and destination objects are similar to each other
*** debugging
    + "no java projects found in the current workspace vscode" :: java project structure not correct
    + "Class has been compiled by a more recent version of the Java Environment" :: spring framework not compatible with jre, eg: with jre 11 matches spring framework 2.x.x, not above
    + "Illegalstate failed to load applicationcontext" :: occured on test class, added annotation '@SpringBootTest'
      - could be object in unit test not properly instantiated
      - could be issue with already build version => try to rebuild project
	+ eg, with vscode :: 'file explorer' -> 'JAVA projects' -> right click on project -> 'rebuild project/all'
    + "java.lang.IllegalArgumentException: warning no match for this type name: com.example.demo.service.UserService [Xlint:invalidAbsoluteTypeName]" ::
    + "No qualifying bean of type 'org.springframework.test.web.servlet.MockMvc' available" :: could be object MockMvc not properly instantiated. Add  ==@AutoConfigureMockMvc== to enable and configure auto-configuration of MockMvc
    + "Resolved [org.springframework.web.HttpMediaTypeNotSupportedException: Content type 'text/plain;charset=UTF-8' not supported]" :: raw Postman not supported.
      - Solution :: in postman, set 'Headers' of http request to : key: 'Content-type', value: 'application/json'
    + " expected:[201] but was:[404]" :: means request was not found. => try to check if url path is correct
    + " expected:[201] but was:[400]" :: well, since http error 400 is bad request, means request is a bad request
    + conversion of Localdate to json :: add json serialize/deserialize to output dto
      - eg ::
          #+begin_src org :exports src
	    @JsonDeserialize(using = LocalDateDeserializer.class)
            @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
          #+end_src
