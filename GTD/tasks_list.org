# -*- mode: org -*-
#+title: tasks list file


* Organization
  :PROPERTIES:
  :ID: eb155a82-92b2-4f25-a3c6-0304591af2f9
  :CATEGORY: Default_task
  :END:
  - this is the default punching in/out task

* Current
- [ ] finish rest project for user-manager :: file:///home/myfirstdebianpc/Desktop/project-res-user_manager.org
- [ ] watch "productivity tool" video ASAP :: '/home/myfirstdebianpc/Downloads/Tech_Talks_-_Productivity_Tips_&_Tools.mp4'
- [ ] start capgemini 'next' platform trainings ::
  + https://degreed.com/ -> my profile -> pathways + plans
- [ ] tags-todo: add extra condition only matching todo headlines :: use https://orgmode.org/manual/Matching-tags-and-properties.html, and complete emacs config file (.emacs_init_configs.org)
- [ ] start learning docker and kubernetes, begin with ::
  + [ ] docker :: https://www.youtube.com/watch?v=eGz9DS-aIeY
  + [ ] kubernetes :: https://www.youtube.com/watch?v=7bA0gTroJjw
  + [ ] ansible :: https://www.youtube.com/watch?v=5hycyr-8EKs
  + [ ] jenkins :: https://www.youtube.com/watch?v=LFDrDnKPOTg
- [ ] build own keybindings cheatsheet (see file kbd_cheatsheet.org) ::
  + https://gist.github.com/drj42/1755992
  + https://emacsclub.github.io/html/org_tutorial.html
- [ ] empty firefox bookmarks todos :: emacs, running, youtubevids, etc.
- [ ] check emacs for UML diagrams ::
  + https://github.com/josteink/wsd-mode
- [ ] create/publish tutorial pages for 1A ::
  - title :: A curated* and heavily biased** knowledge sharing for 1A*** newcomers
  - * from just a 2years experience, so not very much and should be taken with a grain of salt
  - ** from a point of view of a dev in A-squad scrum team, and Sncf Rail display (SRD) component team
  - *** 1A => Amadeus. If you want to show off and sound smart use acronyms. But more seriously, acronyms are used way too much in 1A (bookmark ghost [add_ghost_link])
* Calendar
  :PROPERTIES:
  :CATEGORY: Calendar
  :END:
** Birthdays
** Appointments
** Holidays, days off and vacations

* To learn
  :PROPERTIES:
  :CATEGORY: To_learn_tag
  :END:
** Task todo asap
*** TODO Mooc: Recherche reproductible : principes méthodologiques pour une science transparente (org-mode in research)
  + link :: https://lms.fun-mooc.fr/courses/course-v1:inria+41016+self-paced/courseware/4ab137e597734d239618e813ff3287c9/
  + connection :: rurayi@, ma*7
*** TODO install ssh server on myfirstdebianpc : https://devconnected.com/how-to-install-and-enable-ssh-server-on-debian-10/
*** TODO dependencies management : https://www.youtube.com/watch?v=7ZdMRLPZhFs
** Cpp modern learning (file : cpp_learnings.org) [0/3]
  :PROPERTIES:
  :CATEGORY: cpp_learning
  :END:
*** TODO videos cpp [0/13]
    SCHEDULED: <2023-01-18 Wed>
     1) [ ] back to basics sessions ::
	+ [ ] cppcon2022 just Enough Assembly for Compiler Explorer :: https://www.youtube.com/watch?v=_sSFtJwgVYQ
	+ [ ] cppcon2022 back to basics :: https://www.youtube.com/watch?v=G9MxNwUoSt0&list=PLBr2a3Hg541jp7u7CNukhDstDl6NedNUJ
	+ [ ] cppcon2021 back to basics :: https://www.youtube.com/watch?v=Bt3zcJZIalk&list=PLHTh1InhhwT4TJaHBVWzvBOYhp27UO7mI
	+ [ ] cppcon2020 back to basics :: https://www.youtube.com/watch?v=ZAji7PkXaKY&list=PLHTh1InhhwT5o3GwbFYy3sR7HDNRA353e
	+ [ ] cppcon2019 back to basics :: https://www.youtube.com/watch?v=32tDTD9UJCE&list=PLHTh1InhhwT4CTnVjJqnAKeMfGzOWjsRa
	  - [ ] other playlist on same topic :: https://www.youtube.com/watch?v=iz5Qx18H6lg&list=PLX-5eF57P5eEHJCMYVIOL9u9ZQtKas8Ut
     2) [ ] general c++ related talks ::
	+ [ ] c++weekly, can AI And ChatGPT Replace C++ Programmers ? :: https://www.youtube.com/watch?v=TIDA6pvjEE0
	+ [ ] Kate Gregory, "Am I A Good Programmer?" :: https://www.youtube.com/watch?v=pdHvC8fDC5E
	+ [ ] Hiring in C++ :: https://www.youtube.com/watch?v=uqO8y81_RJI
	+ [ ] essence of c++, bjarne stroustrup :: https://www.youtube.com/watch?v=86xWVb4XIyE
	+ [ ] cppcon2020 c++ is 40 :: https://www.youtube.com/watch?v=u_ij0YNkFUs
	+ [ ] cppcon2018 how to teach c++ :: https://www.youtube.com/watch?v=3AkPd9Nt2Aw
	+ [ ] cppcon2015 stop teaching c, kate :: https://www.youtube.com/watch?v=YnWhqhNdYyk
	+ [ ] cppcon2021 reaching aims of c++, bjarne stroustrup :: https://www.youtube.com/watch?v=15QF2q66NhU
	+ [ ] cppcon2022 an C++ be 10x Simpler & Safer?, Herb Sutter :: https://www.youtube.com/watch?v=ELeZAKCN4tY
	+ [ ] intro to c++ : Modern C++ Quick Start Tutorial - 90 Topics in 20 Minutes :: https://www.youtube.com/watch?v=VpqwCDSfgz0
	  - [ ] 5 Step Plan For Deeper C++ Knowledge :: https://www.youtube.com/watch?v=287_oG4CNMc
     3) [ ] modern c++ ::
	+ [ ] ref-qualifiers and inheritance :: https://www.youtube.com/watch?v=Fsi3JpYCsUM
	+ [ ] cppcon2019 The Best Parts of C++, :: https://www.youtube.com/watch?v=iz5Qx18H6lg&t=23s
	+ [ ] cppcon2021 new mental model of constexpr :: https://www.youtube.com/watch?v=MdrfPSUtMVM
	+ [ ] cppcon2021 lambdas :: https://www.youtube.com/watch?v=IgNUBw3vcO4
	+ [ ] cppcon2017 learning and teaching modern c++, bjarne :: https://www.youtube.com/watch?v=fX2W3nNjJIo
	+ [ ] cppcon2017 tools and techniques to stay up-to-date with modern c++ :: https://www.youtube.com/watch?v=xDEGpKJ62lI
	+ [ ] cppcon2014 essentials of modern c++ style, herb sutter :: https://www.youtube.com/watch?v=xnqTKD8uD64
	+ [ ] cppcon2017 modern c++ c++17 and above, joel :: https://www.youtube.com/watch?v=gPj90zwLphw
	+ [ ] cppcon2022 what’s New in C++23, sy brand :: https://www.youtube.com/watch?v=vbHWDvY59SQ
	+ [ ] cppcon2022 what's In It For You?, Marc Gregoire :: https://www.youtube.com/watch?v=b0NkuoUkv0M
	+ [ ] cppcon2017 practical C++17, jason turner :: https://www.youtube.com/watch?v=nnY4e4faNp0
	+ [ ] dive into c++11, vittorio romeo (see also : http://vittorioromeo.info) :: https://www.youtube.com/watch?v=_4K3tsKa1Uc&list=PLTEcWGdSiQenl4YRPvSqW7UPC6SiGNN7e&index=1
	  - [ ] git sources :: https://github.com/vittorioromeo/Tutorials
     4) [ ] building c++ ::
	+ [ ] cppcon2017 Using Modern CMake Patterns to Enforce a Good Modular Design :: https://www.youtube.com/watch?v=eC9-iRN2b04
	+ [ ] cppcon2022 import CMake, CMake and C++20 Modules :: TBC (see : https://www.youtube.com/watch?v=5X803cXe02Y)
	+ [ ] cppcon2021 Modern CMake Modules :: https://www.youtube.com/watch?v=IZXNsim9TWI
	+ [ ] cppcon2019 deep CMake for Library :: https://www.youtube.com/watch?v=m0DwB4OvDXk
     5) [ ] design ::
	+ [ ] cppcon2022 Back to Basics: Templates in C++ :: https://www.youtube.com/watch?v=HqsEHG0QJXU
	+ [ ] design patterns, klaus iglberger :: https://www.youtube.com/watch?v=u5EAJTHPJN8
	+ [ ] SOLID :: https://www.youtube.com/watch?v=glYq-dvgby4
	+ [ ] cppcon2017 free your functions :: https://www.youtube.com/watch?v=WLDT1lDOsb4
	+ [ ] cppp2021 aesthetics of code, sy brand :: https://www.youtube.com/watch?v=CkGqINHZit0
	+ [ ] cppcon2021 classes design :: https://www.youtube.com/watch?v=iLpt23V2vQE
	+ [ ] cppp2021 classes design ::  https://www.youtube.com/watch?v=X1J-f4LpQ_4
	+ [ ] cppcon2018 concepts the future of generic programming :: https://www.youtube.com/watch?v=HddFGPTAmtU
	+ [ ] cppcon2017 design : concepts for customization points :: https://www.youtube.com/watch?v=WsUnnYEKPnI
	+ [ ] cppcon2021 c++ modules :: https://www.youtube.com/watch?v=9OWGgkuyFV8
	+ [ ] cppcon2021 metaprogramming :: https://www.youtube.com/watch?v=FXfrojjIo80
	+ [ ] cppcon2017 generative c++ :: https://www.youtube.com/watch?v=4AfRAVcThyA
	+ [ ] cppcon2021 branchless programming :: https://www.youtube.com/watch?v=g-WPhYREFjk
	+ [ ] cppcon2016 c++14 reflections :: https://www.youtube.com/watch?v=abdeAew3gmQ
	+ [ ] stop writing dead programs :: https://www.youtube.com/watch?v=8Ab3ArE8W3s
     6) [ ] debugging and profiling ::
	+ [ ] cppcon2021 basics of Profiling :: https://www.youtube.com/watch?v=dToaepIXW4s
	+ [ ] cppcon2022 debugging :: https://www.youtube.com/watch?v=YzIBwqWC6EM
	+ [ ] cppcon2017 linker :: https://www.youtube.com/watch?v=xVT1y0xWgww
	+ [ ] cpp performance tricks :: https://www.youtube.com/watch?v=tD4xRNB0M_Q
	+ [ ] cppcon2016 arguing about undefined behaviour :: https://www.youtube.com/watch?v=yG1OZ69H_-o
	+ [ ] cppcon2016 leak-freedom in c++, herb :: https://www.youtube.com/watch?v=JfmTagWcqoE
	+ [ ] cppcon2016 gdb :: https://www.youtube.com/watch?v=-n9Fkq1e6sg
	+ [ ] cppcon2015 gdb :: https://www.youtube.com/watch?v=PorfLSr3DDI
	+ [ ] cpu caches :: https://youtu.be/WDIkqP4JbkE
	+ [ ] cache friendly :: https://www.youtube.com/watch?v=yyNWKHoDtMs
	+ [ ] cppcon2017 compilers, matt godbolt :: https://www.youtube.com/watch?v=bSkpMdDe4g4
	+ [ ] cppcon2016 high performance code 201: hybrid data structures :: https://www.youtube.com/watch?v=vElZc6zSIXM
	+ [ ] cppcon2018 more powerful and simpler c++, herb sutter (thoughts) :: https://www.youtube.com/watch?v=80BZxujhY38
	+ [ ] cppcon2021 type-and-resource safety, bjarne :: https://www.youtube.com/watch?v=l3rvjWfBzZI
     7) [ ] cppcon2021 package management ::
	+ [ ] cppcon2021 lessons Learned from Packaging 10,000+ C++ Projects :: https://www.youtube.com/watch?v=R1E1tmeqxBY
     8) [ ] best practices ::
	+ [ ] cppcon2019 naming, kate gregory :: https://www.youtube.com/watch?v=MBRoCdtZOYg
	+ [ ] cppp2019 design, kate gregory :: https://www.youtube.com/watch?v=zjH2d5VhTD8
	+ [ ] worst best practices, jason turner :: https://www.youtube.com/watch?v=KeI03tv9EKE
	+ [ ] cppcon2021 reporting and handling errors :: https://www.youtube.com/watch?v=dQaRLmM7KKk
     9) [ ] algorithms ::
	+ [ ] cppcon2021 sums, products, exponents, functors, etc :: https://www.youtube.com/watch?v=FrPzW8U7O6o
	+ [ ] cppcon2019 sorting algorithms, andrei alexandrescu :: https://www.youtube.com/watch?v=FJJTYQYB1JQ
	+ [ ] avoid Linked Lists, bjarne stroustrup :: https://youtu.be/YQs6IC-vgmo
	+ [ ] cppcon2017 algorithms and where to find them :: https://www.youtube.com/watch?v=YA-nB2wjVcI
	+ [ ] cppcon2016 stl algorithms :: https://www.youtube.com/watch?v=h4Jl1fk3MkQ
	+ [ ] "art of code" :: https://www.youtube.com/watch?v=6avJHaC3C2U
     10) [ ] c++ performance and optimisation ::
	 + [ ] c++ performance and optimisation :: https://www.youtube.com/watch?v=eICYHA-eyXM
	 + [ ] c++ performance and optimisation 2 :: https://www.youtube.com/watch?v=G6IYBY-ZyLI
	 + [ ] cppcon2017 c++ performance "going nowhere faster" :: https://www.youtube.com/watch?v=2EWejmkKlxs
	 + [ ] cppcon2021 analyzing and improving build times :: https://www.youtube.com/watch?v=Iybb9wnpF00
	 + [ ] cppcon2021 making the most of your compiler :: https://www.youtube.com/watch?v=tckHl8M3VXM
	 + [ ] 'return x' optimisation ::
	   - [ ] cppnow :: https://www.youtube.com/watch?v=OGKAJD7bmr8
	   - [ ] cppcon2018 :: https://www.youtube.com/watch?v=hA1WNtNyNbo
	 + [ ] cppcon2021 c++ atomics :: https://www.youtube.com/watch?v=zE5IiaViVxk
     11) [ ] cppweekly :
	 + [ ] ep326 deducing `this` :: https://www.youtube.com/watch?v=5EGw4_NKZlY
	 + [ ] ep312 stop using constexpr :: https://www.youtube.com/watch?v=4pKtPWcl1Go
	 + [ ] ep259 CRTP :: https://www.youtube.com/watch?v=ZQ-8laAr9Dg
	 + [ ] ep329 LTO makes program faster :: https://www.youtube.com/watch?v=9nzT1AFprYM
     12) [ ] AI playing video games :: https://www.youtube.com/watch?v=qydj3OZf6hY
	 - [ ] https://github.com/olafurw/poke-fighting-rust
	 - [ ] https://github.com/patricia-gallardo/cpp-doom
     13) [ ] SIMD ::
	 - cppcon2016 designing C++ portable SIMD support :: https://www.youtube.com/watch?v=2HsLsTRxfbA
	 - cppcon2021 simd eve of a new era :: https://www.youtube.com/watch?v=WZGNCPBMInI
	 - cppp2021 simd eve of a new era :: https://www.youtube.com/watch?v=Tqnz4IsmIFY
	 - cppmeeting2021 simd eve of a new era :: https://www.youtube.com/watch?v=XAqMBLGJeXY

*** TODO links cpp [0/15]
     1. [ ] file:///home/myfirstdebianpc/Downloads/978-1-4842-5949-8.pdf
     2. [ ] https://vittorioromeo.info/
     3. [ ] https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-096-introduction-to-c-january-iap-2011/lecture-notes/MIT6_096IAP11_lec10.pdf
     4. [ ] https://devblogs.microsoft.com/cppblog/clear-functional-c-documentation-with-sphinx-breathe-doxygen-cmake/
     5. [ ] https://github.com/lefticus/cpp_weekly
     6. [ ] https://github.com/AnthonyCalandra/modern-cpp-features
     7. [ ] https://github.com/cpp-best-practices/cppbestpractices
     8. [ ] https://github.com/olafurw/talk-cppp-webassembly
     9. [ ] https://github.com/philsquared/cpponsea-slides/tree/master/2022
     10. [ ] https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-s096-effective-programming-in-c-and-c-january-iap-2014/lecture-notes/MIT6_S096IAP14_Lecture3A.pdf
     11. [ ] https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-s096-effective-programming-in-c-and-c-january-iap-2014/lecture-notes/
     12. [ ] file:///home/myfirstdebianpc/Downloads/c++/cpp_indepth_series/Modern_Cpp_Intensive_for_Scientists_Engineers_Programmers.pdf
     13. [ ] https://www.tutorialspoint.com/design_pattern/design_pattern_quick_guide.htm
     14. [ ] https://refactoring.guru/design-patterns/cpp
     15. [ ] https://sourcemaking.com/

*** TODO optional cpp [0/5]
     - [ ] https://www.youtube.com/watch?v=xMBNCtFV8sI
     - [ ] https://www.youtube.com/watch?v=owK_0LGtkOI
     - [ ] https://www.youtube.com/watch?v=Z8NPRfyqNoY
     - [ ] https://www.youtube.com/watch?v=_qaKkHuHYE0
     - [ ] file:///home/myfirstdebianpc/Downloads/c++/cpp-best-practices.pdf

** emacs in general (file emacs_learnings.org) [0/3]
https://www.emacswiki.org/emacs/LearningEmacs
https://cestlaz.github.io/stories/emacs/
*** NEXT videos [0/11]
  1. [ ] https://www.youtube.com/watch?v=qJhlHmDj7BI
  2. [ ] https://www.youtube.com/watch?v=SzA2YODtgK4
  3. [ ] https://www.youtube.com/watch?v=oJTwQvgfgMM
  4. [ ] https://www.youtube.com/watch?v=iWV0DXun88M
  5. [ ] https://www.youtube.com/watch?v=dSZu4jwvaSs
  6. [ ] https://www.youtube.com/watch?v=RlZsCKN6cqc
  7. [ ] https://www.youtube.com/watch?v=JWD1Fpdd4Pc
  8. [ ] https://www.youtube.com/watch?v=gfZDwYeBlO4
  9. [ ] https://www.youtube.com/watch?v=Ea_-TaEGa7Y
  10. [ ] https://www.youtube.com/watch?v=MBhJBMYfWUo
  11. [ ] https://www.youtube.com/watch?v=2z-YBsd5snY

*** TODO links [1/30]
    SCHEDULED: <2023-01-18 Wed>
  1. [ ] magit :: https://www.masteringemacs.org/article/introduction-magit-emacs-mode-git
  3. [X] https://orgmode.org/worg/org-tutorials/org4beginners.html
  4. [ ] for GTDs:
     + http://doc.norang.ca/org-mode.html#HowToUseThisDocument
     + https://orgmode.org/manual/Weekly_002fdaily-agenda.html
     + https://writequit.org/denver-emacs/presentations/2017-04-11-time-clocking-with-org.html
  5. [ ] org mode linter : https://orgmode.org/manual/Org-Syntax.html
  6. [ ] babel :
     + https://orgmode.org/worg/org-contrib/babel/intro.html
     + https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-shell.html
     + https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-eshell.html
  7. [ ] http://www.newartisans.com/2007/08/using-org-mode-as-a-day-planner/
     + https://list.orgmode.org/orgmode/m2myw3fa2f.fsf@newartisans.com/
     + https://list.orgmode.org/orgmode/m21wc7dz4r.fsf@newartisans.com/
  8. [ ] http://members.optusnet.com.au/~charles57/GTD/gtd_workflow.html
     + supersede of deprecated: http://members.optusnet.com.au/~charles57/GTD/orgmode.html
  9. [ ] complete tutorial: https://orgmode.org/worg/org-tutorials/index.html
  10. [ ] 'remember' replaced by 'capture' : http://howardism.org/Technical/Emacs/capturing-intro.html
      + https://orgmode.org/manual/Capture.html#Capture 
      + check again https://orgmode.org/manual/Capture-templates.html
  11. [ ] https://www.emacswiki.org/emacs/GnusTutorial
  12. [ ] https://sachachua.com/blog/2008/04/wicked-cool-emacs-bbdb-set-up-bbdb/
  13. [ ] https://emacs.cafe/emacs/orgmode/gtd/2017/06/30/orgmode-gtd.html
  14. [ ] https://orgmode.org/manual/Include-Files.html
      + https://stackoverflow.com/questions/10968034/in-org-mode-how-do-i-include-other-org-files-from-a-main-org-file
      + https://github.com/dangom/org-thesis
      + https://write.as/dani/writing-a-phd-thesis-with-org-mode
  15. [ ] https://orgmode.org/worg/org-gtd-etc.html
  16. [ ] https://www.emacswiki.org/emacs/GnusTutorial
  17. [ ] https://lgfang.github.io/mynotes/emacs/emacs-xml.html
  18. [ ] https://orgmode.org/org.html#Sparse-Trees
  19. [ ] https://www.gnu.org/software/emacs/manual/pdf/eintr.pdf
  20. [ ] https://orgmode.org/worg/org-gtd-etc.html
  21. [ ] https://orgmode.org/worg/org-tutorials/orgtutorial_dto.html
  22. [ ] https://orgmode.org/manual/Structure-Editing.html
  23. [ ] http://doc.norang.ca/org-mode.html#Publishing
      - more details :: https://orgmode.org/manual/Exporting.html
  24. [ ] https://www.emacswiki.org/emacs/LaTeX
  25. [ ] https://www.emacswiki.org/emacs/EmacsScreencasts
  26. [ ] https://github.com/hlissner/doom-emacs
  27. [ ] https://people.cs.pitt.edu/~milos/courses/cs2740/Lectures/LispTutorial.pdf
  28. [ ] https://www.emacswiki.org/emacs/LearnEmacsLisp
  29. [ ] https://opensource.com/article/21/5/learn-lisp
  30. [ ] https://github.com/jwiegley/use-package
  31. [ ] https://emacstil.com/til/2021/09/09/fold-heading/
  32. [ ] https://orgmode.org/worg/org-tutorials/index.html

*** TODO optional
     - https://www.youtube.com/watch?v=InNlNAoExik
     - https://alphapapa.github.io/org-almanac/

** TODO emacs as IDE (file emacs_learnings.org) [0/3]
*** TODO videos [0/2]
     1. [ ] https://www.youtube.com/watch?v=INTu30BHZGk
     2. [ ] https://www.youtube.com/watch?v=RDrG-_kapaQ

*** TODO links [0/13]
     1. [ ] https://emacs-lsp.github.io/lsp-mode/tutorials/CPP-guide/
     2. [ ] https://tuhdo.github.io/c-ide.html
     3. [ ] (dead ?) https://www.seas.upenn.edu/~chaoliu/2017/09/01/c-cpp-programming-in-emacs/
     4. [ ] (dead ?) https://www.seas.upenn.edu/~chaoliu/2017/01/03/emacs_configuration/
     5. [ ] https://github.com/wuliuxiansheng/Emacs_Configuration
     6. [ ] https://lgfang.github.io/computer/2006/01/01/emacs-undo
     7. [ ] https://github.com/rizsotto/Bear
     8. [ ] https://github.com/joaotavora/eglot
     9. [ ] https://cestlaz.github.io/posts/using-emacs-32-cpp/
     10. [ ] https://github.com/emacs-lsp/lsp-sonarlint
     11. [ ] https://www.emacswiki.org/emacs/DebuggingWithEmacs
     12. [ ] https://kb.iu.edu/d/aqsy
     13. [ ] https://courses.cs.washington.edu/courses/cse378/97au/help/gdb-emacs.html
     14. [ ] https://duckduckgo.com/?t=ffab&q=valgrind+emacs&ia=web
     15. [ ] https://github.com/emacsmirror/rmsbolt
	 + https://github.com/mkcms/compiler-explorer.el
*** TODO optional
     - 

** CMAKE (file emacs_learnings.org)
version 3.22 already installed
*** TODO current
     - https://gist.github.com/GuillaumeDua/a2e9cdeaf1a26906e2a92ad07137366f
     - https://www.youtube.com/watch?v=5FQwQ0QWBTU
     - https://www.youtube.com/watch?v=4K9C83ZNNAg

*** TODO videos
     - 
     - 

***  TODO links
     - https://www.emacswiki.org/emacs/CompileCommand
     - https://stackoverflow.com/questions/2123669/configuring-emacs-for-cmake
     - https://cmake.org/cmake/help/latest/variable/CMAKE_EXPORT_COMPILE_COMMANDS.html
     - https://cmake.org/cmake/help/latest/guide/tutorial/index.html
     - https://gcc.gnu.org/onlinedocs/gcc-4.1.0/gcc/Optimize-Options.html
     - https://valgrind.org/docs/manual/manual.html
     - https://www.gnu.org/software/make/manual/html_node/index.html#SEC_Contents
     - https://www.hiroom2.com/2016/09/03/makefile-header-dependencies/
     - https://github.com/torvalds/linux/blob/master/Documentation/dev-tools/gdb-kernel-debugging.rst

*** TODO optional
     - 

** hledger, emacs finance and accounting (file emacs_finance_hledger_learnings.org)
*** TODO current
     - https://www.youtube.com/watch?v=cjoCNRpLanY
     - https://hledger.org/start.html

*** TODO videos
     - https://www.youtube.com/watch?v=8r5Cp66k4PA

*** TODO links
     - https://github.com/narendraj9/hledger-mode
     - https://hledger.org/quickstart.html
     - https://hledger.org/cookbook.html
     - https://www.ledger-cli.org/3.0/doc/ledger-mode.pdf
     - https://plaintextaccounting.org/

*** TODO optional
     - https://hledger.org/support.html
     - https://github.com/awalker4

** US.es
*** TODO refactor code
    - check design pattern :: object pool (https://sourcemaking.com/design_patterns/object_pool/cpp/1)
*** TODO readings
     - https://www.localsolver.com/misc/LocalSolver_EURO_2015.pdf

*** TODO videos
     -

*** TODO links
     - file:///home/myfirstdebianpc/Downloads/books-learning/us.es/LocalSolver.pdf
     - https://www.localsolver.com/docs/last/quickstart/index.html
     - https://www.localsolver.com/docs/last/exampletour/kmeans.html
     - https://www.localsolver.com/clientpasco.html
     - https://www.localsolver.com/benchmark/huge-instances-capacitated-vehicle-routing-problem-cvrp
     - http://iao.hfuu.edu.cn/blogs/science-blog/29-measuring-the-runtime-of-optimization-algorithms
     - https://matplotlib.org/3.1.0/gallery/statistics/boxplot.html
     - https://co-enzyme.fr/blog/
     - scihub

*** TODO optional
     - https://www.localsolver.com/doccenter.html

** Other learning tasks
*** TODO git repository backup : https://bruhtus.github.io/posts/git-repo-backup/
*** TODO Web assembly
     - https://www.youtube.com/watch?v=3sU557ZKjUs
     - https://marcoselvatici.github.io/WASM_tutorial/
     - https://webassembly.org/getting-started/developers-guide/
     - https://developer.mozilla.org/en-US/docs/WebAssembly/C_to_wasm
     - https://training.linuxfoundation.org/training/introduction-to-webassembly-lfd133/

*** TODO Web prgming (Java mainly)
     - (check for spring with emacs though) https://codelabs.developers.google.com/codelabs/cloud-app-engine-springboot/#0
     - https://www.baeldung.com/start-here
     - https://medium.com/eat-sleep-code-repeat/running-your-first-spring-boot-project-in-eclipse-ide-4fbc699d44dd
     - https://drive.google.com/drive/folders/1BL4kq8RPuqjHapdhnZdxbvjrROqZxedc
     - https://angular.io/start
     - https://reactjs.org/tutorial/tutorial.html
     - https://www.tutorialspoint.com/angular2/angular2_metadata.htm
     - file:///home/myfirstdebianpc/Downloads/angular.pdf
     - https://angular.io/guide/cheatsheet
     - https://www.tutorialspoint.com/angular4/angular4_services.htm
     - https://www.youtube.com/watch?v=IZEolKjcjks
     - https://openclassrooms.com/fr/courses/7471261-debutez-avec-angular?archived-source=4668271
     - protractor angular
     - https://gradle.org/maven-vs-gradle/
     - https://tomcat.apache.org/tomcat-10.0-doc/index.html

*** TODO Music and mathematics
     - see bookmark on myfirstdebianpc firefox :: youtube -> music_and_maths

*** TODO sh and zsh
     - https://www.youtube.com/watch?v=V8EUdia_kOE
     - https://www.youtube.com/watch?v=ZtqBQ68cfJc
     - https://thevaluable.dev/zsh-completion-guide-examples/
     - https://ryanstutorials.net/bash-scripting-tutorial/
     - https://www.shellscript.sh/first.html
     - https://linuxhint.com/debug-bash-script/
     - https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#History-Control
     - https://openclassrooms.com/fr/courses/7170491-initiez-vous-a-linux?archived-source=43538

*** TODO SC2
     - https://github.com/N00byEdge/BWEM-community
     - https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-370-the-battlecode-programming-competition-january-iap-2013/syllabus/
     - http://richoux.github.io/GHOST/
     - https://github.com/davechurchill/commandcenter/blob/master/src/BaseLocation.cpp
     - https://github.com/ddumez
     - https://github.com/SKTBrain/awesome-starcraftAI

*** TODO multicore programming
     - https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-189-multicore-programming-primer-january-iap-2007/syllabus/
     - https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-827-multithreaded-parallelism-languages-and-compilers-fall-2002/lecture-notes/
     - https://ocw.mit.edu/courses/earth-atmospheric-and-planetary-sciences/12-950-parallel-programming-for-multicore-machines-using-openmp-and-mpi-january-iap-2010/
     - https://www.codeproject.com/Articles/1239410/Dining-Philosophers-Problem
     - https://www.thecrazyprogrammer.com/2016/07/bankers-algorithm-in-c.html

*** TODO cryptocurrencies
     - https://ocw.mit.edu/courses/media-arts-and-sciences/mas-s62-cryptocurrency-engineering-and-design-spring-2018/lecture-notes/
     - https://training.linuxfoundation.org/training/blockchain-for-business-an-introduction-to-hyperledger-technologies/

*** TODO best practices
     - https://www.coursera.org/specializations/secure-coding-practices#courses

*** TODO julia
    - note :: julia seems to be kind of cancelled as not drawing much attraction in the community, so, maybe drod it... ?
    - https://julialang.univ-nantes.fr/julianantes/documents/
    - https://www.juliabloggers.com/linear-programming-in-julia-with-glpk-and-jump/?utm_source=ReviveOldPost&utm_medium=social&utm_campaign=ReviveOldPost
*** TODO not optional, but misc
  + melpa, elpa, non elpa ::
    - https://www.reddit.com/r/emacs/comments/nmykrg/org_elpa_will_be_shutting_down_and_org_contrib/
  + snapshots :: https://unix.stackexchange.com/questions/108131/how-are-filesystem-snapshots-different-from-simply-making-a-copy-of-the-files
  + org-mode ::
    - insert files :: https://www.reddit.com/r/emacs/comments/6aqsj8/insert_content_from_another_file/
    - include files :: https://orgmode.org/manual/Include-Files.html
*** TODO optional
     - https://training.linuxfoundation.org/training/introduction-to-kubernetes/
     - https://docs.docker.com/engine/install/debian/
     - https://training.linuxfoundation.org/training/introduction-to-linux/
     - https://dl.acm.org/profile/81311486357
     - https://dblp.org/pid/24/4642.html
     - https://www.guillaume-bouffard.com/
     - https://medium.com/@ankit.sinhal/mvc-mvp-and-mvvm-design-pattern-6e169567bbad
     - https://training.linuxfoundation.org/training/a-beginners-guide-to-linux-kernel-development-lfd103/
     - https://training.linuxfoundation.org/training/introduction-to-cloud-infrastructure-technologies/
     - https://training.linuxfoundation.org/training/beginners-guide-open-source-software-development/
     - https://www.coursera.org/learn/real-time-systems

* Weekly review
  SCHEDULED: <2023-06-26 Mon ++1w>
  ,, :LOGBOOK:...
  ,, :PROPERTIES:...
  What to review:
  - [ ] Check 'follow-up' folder (physical/virtual folder for stuff that should be dealt with, but not urgently) ::
  - [ ] Review weekly agenda :: =F12 a w //=
    + review/fix/fill tasks that needs to be done in the week
  - [ ] Check clocking data for past week :: =v c=
  - [ ] Review clock report for past week :: =R=
    + [ ] Check where we spent time too much or too little, and rectify this week
  - [ ] Look at entire agenda for today ::  =F12 SPC=
  - [ ] Review projects :: =F12 SPC //= and =V= repeatedly to view each project
  - start work
    + daily agenda first - knock off items
    + then work on ==NEXT== tasks
* Finances
  :PROPERTIES:
  :CATEGORY: Finances
  :END:

* Habit
  :PROPERTIES:
  :CATEGORY: Habit
  :LOGGING:  DONE(!)
  :ARCHIVE:  %s_archive::* Habits
  :END:

* Health
  :PROPERTIES:
  :CATEGORY: Health
  :END:

* House
  :PROPERTIES:
  :CATEGORY: House
  :END:

* Notes
  :PROPERTIES:
  :CATEGORY: Note
  :END:

* Recreation
  :PROPERTIES:
  :CATEGORY: Recreation
  :END:

* Source related tasks
  :PROPERTIES:
  :CATEGORY: Src_related_task
  :END:

* Tasks
  :PROPERTIES:
  :CATEGORY: Task_tag
  :END:

* Us.es
  :PROPERTIES:
  :CATEGORY: Us.es
  :END:

