# -*- mode: org -*-
#+TITLE: Org Mode - My projects task list
#+LANGUAGE:  en
#+AUTHOR: me
#+OPTIONS:   H:3 num:t   toc:3 \n:nil @:t ::t |:t ^:nil -:t f:t *:t <:nil
#+OPTIONS:   TeX:t LaTeX:nil skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+OPTIONS:   author:t creator:t timestamp:t email:t
#+DESCRIPTION: A description of projects (ongoing and others).
#+KEYWORDS:  org-mode Emacs organization GTD getting-things-done project
#+INFOJS_OPT: view:nil toc:t ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+CATEGORY: Projects
#+TAGS: Projects
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport

* Notes
[2025-05-18 Sun 14:30]
- generic goals ::
  + excellent advices from Clement Uwajeneza :: (source: https://www.youtube.com/watch?v=0zyh-5tnWYQ)
    - tldr ::
      1. focus on the problem expertise than the technical, highlight your understanding of the problematic
      2. from start :: set-up goals/definitions/specs, and build metrics to incrementally evaluate closeness to goal(s)
      3. selling your solution should be stated as: "given these sets of functional issues, and ease of adoption by the end-users, our solution is providing this improvement..., but also given that..., etc."
    - ask yourself : what do you want to achieve :: focus on the *service* and the *needs*
      + forget about the techno from the get-go :: don't provide the latest apps/technos/product/means for the sake of selling your technical expertise,
      + instead, learn from the identified needs, gather information, and use the technical knowledge to provide a product adapted to the need, for its improvement, but also that can be easily adopted
      + avoid too complex solutions, that can be too complicated to deploy, complicated to communicate and used by the user
    - set up metrics :: from the start, even when knows that they will be subject to change later on, be able to fix metrics criteria,
      + helps to further improve the understanding of the problematic,
      + also helps ease communication with the customers
    - remember, technos are not products, they are tools
* Placeholder for misc project tickets
[2024-03-15 Fri 21:20]
** dotfiles
[2024-06-03 Mon 20:53]
*** TODO DOTF000: dotfiles basic structures, and dotfiles update [0/1]
  + [ ] implement yaml schema and test validation is working properly (using pajv, eg: ~pajv validate -s configs/basic/schemas/cmds.yaml -d configs/basic/apt.yaml~, doc: [[https://www.npmjs.com/package/pajv][pajv doc]])
  + [ ] check dotfiles with ansible ([[https://phelipetls.github.io/posts/introduction-to-ansible/][dotfiles and ansible]])
** Design
[2024-03-15 Fri 21:21]
- DES000: design update; // Generic ticket number for small design tasks that do not need tracing
- DES001:
** Maintenance
- MAINT000: maintenance update; // Generic ticket number for small maintenance tasks that do not need tracing
- MAINT001:  
** Refactoring
[2024-03-15 Fri 21:23]
- REFACT000: refactoring update; // Generic ticket number for small refactoring tasks that do not need tracing
- REFACT001:  
** Learnings
[2024-03-15 Fri 21:39]
- LEARN000: learning updates; // Generic ticket number for small learning tasks that do not need specific tracing
- LEARN001: learning for emacs
- LEARN002: learning for C++
- LEARN003: learning for Java
** YTA project
- YTA000: YTA basic building: MVP, basic structure, architecture; // Generic ticket number for preliminaries need for an MVP (API construction, architecture, first business prospect and ideas, etc.)
- YTA001: probing phase: further than basic foundations
- YTA002: MVP, bit advanced than basic foundations 
** Mini projects
[2024-03-22 Fri 22:16]
- placeholder for miscellaneous small projects that don't really need project management, but just some basic tracking
- MINPROJ000: small project
- MINPROJ001: small emacs project 
- MINPROJ002: small C++ project 
- MINPROJ003: small Java project 
* TODO WB API prober application
** NEXT WB API parser
- characteristics ::
  + Java library; inversion of control framework: quarkus; dependency manager: gradle
- tasks to complete [1/4] ::
  + [X] collect information on world bank API official page (https://datahelpdesk.worldbank.org/knowledgebase/topics/125589-developer-information)
  + [ ] test further WB API: checkout advanced capabilities of WB API: advanced requests, using metadata/metatypes operations, searches, and requests, SDMX queries, etc.
  + [ ] learn Quarkus
  + [ ] learn java frameworks for big data: kafka, spark, hadoop, cassandra
** TODO WB API prober
[2024-03-14 Thu 02:50]
* TODO Travel Agency (TA) business project
[2024-05-12 Sun 02:25]
** NEXT ADAP
- create MVP bridge to 1A API ::
  + [ ] link successfully to 1A:
    - [ ] required and security setup
    - [ ] do a first test query
