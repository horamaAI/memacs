# -*- mode: org -*-
#+title: Keybindings cheatsheets
#+SETUPFILE: ~/set-up-files/basic-setups.org


* Emacs
** foreword, help and basic
 - C- Ctrl
 - M- Meta (Esc or Alt on keyboard)
 - S- Shift
 - RET- well, return
 - TAB Tabulation
 - C-h b : list all bindings available in a buffer (b for bindings).
 - C-h k [enter key or chain of key] : describe entered key

** help
 - describe tool :: ==C-h 'c'== // where 'c' is what one wants described
   + describe bindings :: ==C-h b==
   + describe function :: ==C-h f==
   + describe variable :: ==C-h v==
     - eg: ==C-h v org-yank-adjust-subtrees== :: "non-nil means when yanking subtrees, adjust the level. With this setting, ‘org-paste-subtree’ is used to insert the subtree"
   + describe mode :: ==C-h m==
   + describe syntax :: ==C-h s==
** install packages with Melpa/Elpa
   - install package with melpa :: M-x package-install
   - list available packages with melpa (and install if needed) :: M-x package-list-packages
     + ‘i’ to mark for installation
     + ‘u’ to unmark
     + ‘x’ to perform the installation
     + ‘RET’ to get more infos
   - list available packages with elpa :: M-x list-packages
   - refresh after package update :: M-x package-refresh-contents
** file management
*** filesystem
 - open recent files dialog :: C-x C-r
 - rename file (using dired) ::
   1. switch to dired buffer :: C-x d
   2. navigate to file
   3. go into wdired mode :: C-x C-q
   4. rename file
   5. confirm :: C-c C-c

*** file display
 - show next/previous screen :: C-v/M-v
 - reposition window :: C-M-l
 - keep current window, close others :: C-x 1

*** file navigation
 - selection ::
   + select all :: ==C-x h==
   + select column :: ==C-x SPACE==
     - insert text inside selected region :: C-x r t
 - move forward/backward on word :: ==M-f/M-b==
 - search and replace ::
   + search forward/backward :: ==C-s/C-r==
   + with REGEX search forward/backward :: ==C-M-s/C-M-r==
   + query replace (search and replace) :: ==M-S-5==
   + with REGEX query replace (search and replace) :: ==C-M-S-5==
   + regex search on current file of *all* matching results in a collapsed view :: ==C-c / /==

*** file edition
 - links ::
   + edit link :: ==C-c C-l==
   + insert link ::
     - to another file :: [​[file:remember.org][remember]]
     - image :: [​[file:img/test.jpg]]
 - deactivate/activate auto-fill (line break) in current buffer :: ==C-c q==
 - duplicate line :: ==C-c d==
 - escape character :: use 'zero width character' :: ==C-x 8 <RET> 200B <RET>==
   + eg :: to write link example in plain text, use ['x'​[file:remember.org][remember]], where 'x' denotes the zero width character
 - insert inclusion (include from other file) ::
   + source :: https://orgmode.org/manual/Include-Files.html
   + ​#​+INCLUDE: "~/path-to-source-org-file.org" :minlevel 1 :: 'minlevel' to skip adding the included part headers as child, but rather add it as sibling
 - add source code field (into ) :: ==C-c C-,==, process :
   1. select s (displayed as [s]) for src code
   2. add type of source code needed (eg: c++ for #+begin_src c++; R for #+begin_src R, etc.)
   3. eg ::
      #+begin_src c++
      auto main()-> int {
          std::cout << "Hello world\n";
      }	  
      #+end_src
**** tables
     - start table ::
       + automatically :: C-c | (default : 5cols*2lines)
       + manually :: insert | for each column
     - jump to next cell :: TAB
     - convert region to table :: select region and C-c | (eg: selected: toto, tata; becomes | toto | tata |)
     - move column/line to right/left/UP/DOWN :: M-<RIGHT>
     - insert row/column :: S-M-<RIGHT>
     - delete current column :: S-M-<LEFT>
     - set width of columns (narrow size of column) :: in first row, insert number of chars to display, eg: <10>
       + display content of narrowed cell :: C-u TAB (or "C-u C-c `"; or edit conent in separate window: "C-c `")
** emacs buffers and windows management
 - list buffers :: =C-x C-b=
 - local refresh of current buffer :: =C-c C-c=
 - switch between buffers :: =C-x b=
 - open buffer in another window :: =C-x 4 b=
 - execute code block (place first cursor inside code block) :: =C-c C-c=
 - minimize window (back to toolbar) :: =C-x C-z=
 - move current visible window with respect to cursor :: =C-l= (multiple time (3*) until desired display)

** org-mode
*** org-mode document structures
- headlines and items ::
  + add headline :: =C-RET=
  + add item :: =M-RET=
  + move item/headline up/down :: =M-UP/DOWN=
  + cycle through available bullets :: =C-c -=
- drawers :: 
  + insert a drawer below current headline :: =C-c C-x d= // calls 'org-insert-drawer'
  + insert property drawer below current headline :: // calls 'org-insert-property-drawer'
  + LOGBOOK ::
- add time-stamped note to ‘LOGBOOK’ drawer :: =C-c C-z=

*** exporting org-mode files
- insert templates options for exporting :: ==C-c C-e # [category]== // where [category] can be html, latex, ascii, etc.
  + to change option :: ==C-c C-c==
- insert customized templates (setup files) ::
  + need of directory to store setup files :: e.g. ~/.emacs.d/org-templates/
  + call setup file :: 
    #+begin_src org :exports src
    eg :: #+SETUPFILE: ~/.emacs.d/org-templates/level-N.org
    #+end_src
- export :: =C-c C-e' + key of export type needed=
  + eg, export to html file :: =C-c C-e h h= // bound to org-html-export-to-html

*** org agenda and todo items
**** org agenda
  - call org agenda :: =C-c a=
    + bh keybinding :: =F12 a=
  - reschedule selected item :: =C-c C-s= // and then set relative to today: +1, +2w, etc.
  - add/remove file to org agenda :: C-c [ (remove : C-c ])
    + careful :: to be sure and use whole content of folder, prefer manual edit than C-c [

**** org agenda todo, checklists, and GTD (getting things done)
  - add item with checkbox :: ==C-S-M-m==
  - toggle between todo states (TODO-DONE-etc) :: ==C-c C-t== // will create todo task if not one already
  - toggle checkbox ([ ] to [x]) :: ==C-c C-c==
***** org-capture
   - call capture templates on task :: C-c t // t here is for task, not template
   - after finished entering details, file item in defined org-default-notes-file (will resume previous task) :: C-c C-c

****** refiling tasks
   - 

***** Time clocking
****** Clocking in (How to)
       Select any :
       - C-c C-x C-i
       - I :: in the agenda
       - I :: speed key on first character of heading line
       - f9 I :: (globally defined key bindings) while on the task in agenda
       - f9 I :: while in the task in an org file

****** Default task clocking
       - set default timing in a headline for default clocking ('**
	 Organisation' for mine)
       - quick clocking in in default :: C-u C-c C-x C-i d
       - when interruption occurs, set a capture task to pause current
	 time clocking
       - change default clocking task ::
	 1. visit new default task in org buffer
	 2. clock it in with :: C-u C-u C-c C-x C-i
	 3. now new task is the default

****** Clock history for clocking old tasks
       - scenario ::
	 + currently working on and clocking Task A (default 'Organization'
	   for example)
	 + get interrupted and switch to Task B (any)
	 + Task B completed and now want to go back to Task A ('Organization') again to continue
       - solution ::
	 + solution 1 :: clock in again on Task A and resume work
	 + solution 2 :: when completed Task B, hit 'C-u C-c C-x C-i i' to
	   display clocking history selection buffer (the 'i' at the end
	   is for 'interrupted')

****** Clocking interruption flow
       interruption occurs when clocking task:
       - Create a quick capture task journal entry ::
	 + is it a one shot uninteresting task ? ::
	   1. create journal capture for it :: ==C-c c j==
	   2. create heading for task;
	   3. do task;
	   4. file it :: ==C-c C-c== (restores clock back to previous clocking task)
	   5. clock in something else or continue with current clocking task

****** Find task to clock in
       :PROPERTIES:
       :CUSTOM_ID: task_to_clock_in
       :END:
       use one of the following (listed by most frequently used first) :
       1. Use clock history C-u C-c C-x C-i: Go back to something I was clocking that is not finished
       2. Pick something off today's block agenda: *SCHEDULED* or
	  *DEADLINE* (items that need to be done soon)
       3. Pick something off the *NEXT* tasks agenda view Work on some unfinished task to move to completion
       4. Pick something off the other task list
       5. Use an agenda view with filtering to pick something to work on
       Note : punching in on selected task will restrict the agenda view
       to that project so that can focus on just that thing for some period of time. 

****** Editing clock entries
       (edition often needed to reflect reality)
       ex scenario: when not properly clocked in on a task, then previous clocked task still
       run and count for both tasks, which is wrong.
       => solution : clock in properly the latest task, and edit start and
       end times to correct clocking history.
       Step to edit :
       1. org-agenda-log-mode : (f12 a l, if f12 is mapped to org-agenda,
	  C-u C-u l otherwise) visit clock line for an entry, shows all clock lines for today
       2. then navigate desired clock line
       3. hit TAB
       4. put cursor on part needed to edit
       5. use S-<UP> or S-<DOWN> to change the time
       !!! CAREFUL not to create overlaps when fixing clock entries, use :
       - v c :: in daily agenda, and it will identify gaps and overlaps
*** speed commands
- defaults ::
  + ==I== and ==O== :: for clocking in and out
  + ==J== :: jump to current or last clocking task
  + ==t== :: change todo state
  + ==TAB== and ==S-TAB== :: for cycling
- from bh configs :: 
  + ==c== and ==C== :: are disabled by bh so they do not accidentally self insert when not intended to

*** Cursor motion
[2023-12-11 Mon 12:09]
- ==C-c C-n/p== :: (org-next-visible-heading), go to next/previous heading
- ==C-c C-f/b== :: (org-forward-heading-same-level), go to next/previous heading same level
- ==C-c C-u== :: (outline-up-heading), backward to higher level heading
- ==C-c C-j== :: (org-goto), jump to a different place without changing the current outline visibility
  + shows the document structure in a temporary buffer, where you can use the following keys to find your destination ::
    - ==TAB== :: cycle visibility
    - ==DOWN/UP==	:: next/previous visible headline
    - ==RET== :: select this location
    - ==/== :: do a Sparse-tree search
    - following keys also work if ==org-goto-auto-isearch== is turned off ::
      + ==n/p== :: next/previous visible headline
      + ==f/b== :: next/previous headline same level
      + ==u== :: one level up
      + ==0...9== :: digit argument
      + ==q== :: quit
  
* C++
  + activate c++ mode (done by default for .cpp, .cxx files, but not .h files that are opened as c files) :: M-x c++-mode

* Terminal
- add last argument of previous command :: ESC - .
- comment current command line :: ESC - #
  + nice to add command in terminal history and find it with :: C-r (backward search)
  + add keybinding in ~/.zshrc :: bindkey '#' pound-insert

* Time reporting (org agenda => go into mode first)
  - v c :: check for unclosed clock times, gaps, overlaps, etc.
  - check past month clocked times :: 'f12 a v m b v c'
    + f12 a :: org-agenda
    + v m :: org-agenda-month-view
    + b :: org-agenda-earlier : go back in time to display earlier
      dates (previous month here)
    + v c :: show overlapping clock entries, clocking gaps, and other
      clocking problems in current agenda range
  - clock reporting to summarize time spent ::
    + 'f12 < a v m b R' :: limit agenda to a specific file containing
      tasks needed to report
** Task time estimate (with column view)
   :PROPERTIES:
   :CUSTOM_ID: task_time_estimate
   :END:
   *Note* : timing a task is a difficult skill to master. Org-mode makes it easy: practice _creating estimates_ for tasks and _then clock the actual time_ it takes to complete. By _repeatedly estimating tasks_ and _reviewing how estimates relate to the actual time clocked_, one can tune his estimating skills.
   - creating estimate with column view :: use 'properties' and
     'column view' to do project estimates (setq globally variable
     org-columns-default-format)
     + create estimate for task or subtree ::
       1. start column mode : C-c C-x C-c (org-columns, found in org-mode-map)
       2. collapse tree with 'c'
       3. put cursor in 'Estimated Effort'
       4. can set estimated effort with quick keys 1 to 9 (depending
          on settings)
       5. exit column mode with 'q'
     + saving estimates ::
       - save by creating a dynamic clock report table at the top of
         the project subtree : 'C-c C-x i' to insert clock table with
         estimates and any clocked time to date
	 !!! careful: delete lines #+BEGIN: and #+END: after use,
         since otherwise can accidentally update table by hitting C-c
         C-c on line #+BEGIN:
     + reviewing estimates ::
       - 'column view' is great to review estimates: creating dynamic
         clock table ::
       - 'C-c C-x i RET' :: save project review
       - C-c C-x C-d :: quick summary of clocked time for current org
         file
     + providing progress reports ::
       - ex: someone wants details of worked done this far => generate
         log report in agenda with completed tasks and states changed,
         combined with agenda clock report (generated with 'R') for appropriate time period.
       - settings to generate aforementioned data:
	 ```
           ;; Agenda log mode items to display (closed and state changes by default)
           (setq org-agenda-log-mode-items (quote (closed state)))
         ```
       - => to generate report ::
	 1. pull up agenda for appropriate time-frame (today,
            yesterday, this/last week, etc.)
	 2. hit: 'l R' to add log report without clocking data lines,
            and agenda clock report at the end
	 3. export: ex: html : 'C-x C-w /tmp/agenda.html';
            plain-text : 'C-x C-w /tmp/agenda.txt'
	 4. *BONUS* : combining with tags filtering help keeping only
            exporting the needed data

* Others
- maximize/minimize windows :: Super- UP/DOWN
- [Debian] shutdown :: C-M-Del
- [Debian] run application pop-up :: Win-r

* Tags
  - examples of use:
    + filtering todo lists and agenda views
    + providing context for tasks
    + tagging notes, phone calls, meetings, tasks to be refiled, ...
    + tagging tasks in WAITING state because parent is WAITING
    + tagging cancelled tasks because parent is CANCELLED
    + preventing export of some subtrees when publishing
    + etc.
  - use mutual exclusion when context appropriate :: @office should mutually
    exclude @home for example
  - mutually exclusive tags should be seen as :: "context" tags
  - tasks are grouped in org files with #+FILETAGS: entry :: apply
    tags to *all* tags, but to the file only => can use the tag to
    filter file specific tags
  - nice use of FILETAGS to apply multiple tags to files (eg: apply
    refile to all tasks in refile file)

* Handling phone calls
  (in conjunction with bbdb works better)
  - use of bbdb lookup to insert contact when phone capturing ::
    <f9>-p (of course if key mapping done in emacs init file)

* Filtering
  - / RET :: in agenda mode: filters tasks based on user-provided function
    + mark subsequently delayed tasks as on 'HOLD' => / RET filter removes all 'HOLD' tasks and subtasks.

* cheatsheets
** general
   - autocomplete ::
     + either with usual M-/ :: autocomplete (cycle through all known completions, even from other files)
     + or using company-mode :: (selected option)
   - emacs tutorial :: C-h t
   - focus current headline and hide others :: C-x n s
     + undo fold :: C-x n w
   - insert link :: C-c C-l, and follow instructions
     + ex (do not insert escape backslash \): \[\[https://www.youtube.com/watch?v=SzA2YODtgK4\]\[source video\]\]
       - gives : ex (do not insert escape backslash \): [[https://www.youtube.com/watch?v=SzA2YODtgK4][source video]]
   - kill buffer :: C-x k
   - kill until end of line :: C-k
   - list buffers :: C-x C-b
   - open link :: C-c C-o
   - other window ::
     + open file in other window :: C-x 4 C-f
     + move between windows :: C-x o
     + Scroll other window upward :: C-M-v
     + Scroll other window downward :: C-M-S-v
   - police formatting :: *Bold* (surrounded with *), /italic/ (surrounded with /), =verbatim= (surrounded with =), +strikethrough+ (surrounded with +), _underline_ (surrounded with _ (underscores))
   - rectangle playing ::
     1. *select rectangle* : C-x Space, or M-x rectangle-mark-mode
     2. then :
	+ insert string into selected rectangle :: C-x r t, or M-x string-rectangle
	+ but also ::
	  - kill rectangle :: C-x r k, or M-x kill-rectangle
	  - yank rectangle :: C-x r y, or M-x yank-rectangle
	  - delete rectangle :: C-x r d, or M-x delete-rectangle
   - save :: C-x C-S
   - sentences ::
     + Move between sentences :: `M-a' and `M-e'
     + Kill sentence forward :: ‘M-k’.
     + Kill sentence backward :: ‘C-x DEL’
   - switch buffer :: C-x b

** agenda view
   - custome agenda view use (mains) ::
     + single block agenda :: (show following :)
       - today's overview
       - find tasks ::
	 + to be refiled
	   - 
	 + stuck projects
	 + next tasks
	 + waiting on something
	 + to be archived
       - show related tasks
       - reviewing projects
     + finding notes ::
     + viewing habits ::

** capture

** Dired (Directory editor)
   - C-x d, C-x 4 d, C-x 5 d :: visit directory
   - C-x C-q :: make dired buffer editable, ex: to rename files,
     change file ownership and privilege

** refile
   - C-c C-w :: call refile
   - ido and refile ::
     1. C-c C-w => [complete string for target file] => C-SPC to limit proposal list
        => [complete target region] => RET
   - refile bulk (group refile) ::
     1. mark the tasks to refile with 'm'
     2. and then 'B r' (maybe for 'bulk refile')
   - refile as subtask of current clocked task :: (see http://doc.norang.ca/org-mode.html#RefilingTasks)
   - refile notes ::
     + some notes are specific related to projects, and not generally
       useful, so can be archived with the project when it is completed.
   - refile phones and meetings :: nice to refile phones when billed
     into right category, but also meetings if needs follow ups.

** Ido
(Interactive Do 'IDO' : interactive use of buffers and files)
   - 'working directories' :: directories where files have most
     recently been opened. Current directory inserted at front of
     'ido-work-directory-list' whenever a file is opened with
     'ido-find-file' and other file-related functions.
     + 'ido-max-work-directory-list' :: specifies maximum number of working directories to record.
     + 'ido-max-dir-file-cache' :: specifies maximum number of working
       directories to be cached (size of cache of
       'file-name-all-completions' results)
   - Matching :: (among buffers, buffers and directories)
     + 'interactive substring matching' :: as typing substring, list of
       recently visited buffers/files appears
       - C-s or C-r :: to rotate between buffers/filenames/directories
       - TAB (ido-complete) :: to complete if current substring can be restricted
       - C-j (ido-select-text) :: select current completion as target,
         or create new buffer instead of one proposed if doesn't exist
       - to be even faster :: use characters that restrict the most
         the list of buffers/filenames/directories, ex: two files
         named 1234 and 123, just type 4 and directly get 1234
       - C-x C-f (ido-find-file) :: same as usual (find file), but
         with the perks of Ido
     +n 'prefix matching' :: 
       - C-p :: toggle to prefix matching
     - 'Flexible matching' ::
       - when 'ido-enable-flex-matching' is non-nil :: do flexible
         matching, ex: if exist buffers/files/directories alpha, beta,
         delta, gamma, when entering 'aa': will match alpha and gamma, while
         'ea' will match beta and delta. If prefix match also active,
         'aa' will match alpha only, while 'ea' won't match anything
     - 'regex matching' :: 
       - C-t :: toggling, when 'ido-enable-regexp' activated
       - ex: '[ch]$' :: list files ending with c or h 
   - hidden buffers/files, toggle display :: C-a (ido-toggle-ignore)

** emacs IDE

** org mode (general)
   - goto next visible headline :: C-c C-n
   - move headline up/down :: M-up/down
   - promote/demote headline :: M-left/right
   - switch between itemize to numbered list :: C-c -
     + !!! depends on 'org-plain-list-ordered-item-terminator', type of list, and its indentation
   - turn plain list item to headline :: C-c *
   - checkboxes :: similar to TODO items, but in more lightweight way
     (hierarchical => children reflects on parent)
     + toggle between states :: C-c C-c
   - TODO tasks ::
     + rotate state (ex: TODO to DONE, command 'org-todo') :: S-let/right, or C-c C-t
     + insert new todo below current (command 'org-insert-todo-heading') :: M-S-RET
     + global todo list (collect todo items with not-done states from all agenda files into single buffer) ::
       - M-x org-agenda t :: collect TODO items from all agenda files into single buffer
       - M-x org-agenda T :: like above, but allow selection of specific TODO work

** GTD
   - C-c a a :: 'org-agenda' + 'org-agenda-list' to view agenda list (default: weekly view)
   - C-c C-s :: 'org-schedule', schedule task
   - C-c C-d :: 'org-deadline', set deadline for task
*** Projects
    - lazy approach of projects :: A 'project' is every task with any subtask
    - 'stuck' projects :: any project without any 'NEXT' todo subtask
      defined, or its latest task is 'WAITING'
      + it's nice to keep 'waiting' tasks in the stuck project view so
        that it is noticed and has a regular 'follow-up'
    - org-mode agenda view for 'stuck' projects :: shows all projects
      without any 'NEXT' defined
      + => assign a 'NEXT' task if still needed

*** Weekly review process
    - pick a day in the week for the review (friday/monday)

*** Archiving
    Archiving allows cluter free tasks, and focus on latest tasks.
    If need to check archived tasks, then look in appropriate archived
    file.
    It is good to archive regularly tasks that have been 'DONE' for a period
    of time. ex: archive tasks that were completed since more than a
    month => current month benefits from clocking from last month.
    - 'a y' in agenda :: archive task subtree
    - in agenda ::
      + mark all entries to archive :: 'm'
      + archive them to the appropriate location :: 'B $'
    - using tag 'ARCHIVE' on a task :: useful when task contains data
      to check if specific need occurs

*** Publishing and exporting
    - publish single file :: 'C-c C-e' + key of export type needed
    - publish graphics with plantuml and ditaa ::
      1. create source block within #+begin_src ... #+end_src
      2. build the picture with 'C-c C-c'
	 - toggle display of inline images with 'C-c C-x C-v'
    - publishing projects (or multiple files) :: TO_COMPLETE      

** hledger
  + 

* emacs IDE
  + 

* emacs and org-mode:
** 'capture', previously known as 'remember' (notes taking)
   x. org-capture is global: can be called anywhere in emacs, whether editing txt, or reading email
   x. main reference: https://orgmode.org/manual/Capture.html#Capture
   x. thorough tuto: http://howardism.org/Technical/Emacs/capturing-intro.html
   x. 'dateTrees': methods of specifying location based on the date.
        xx. 
   x. C-c C-c: save current capture and return to previous buffer
   x. During expansion of template, special %-escapes allow dynamic insertion of content: small selection of possibilities:
	xx. ‘%a’ :: annotation, normally the link created with org-store-link (from capture file, points to where capture was called)
	    xxx. can for example be useful when deriving task from mail
	xx. ‘%i’ :: initial content, the region when capture is called with C-u
	xx. ‘%t’, ‘%T’ :: timestamp, date only, or date and time
	xx. ‘%u’, ‘%U’ :: like above, but inactive timestamps
	xx. %^g :: prompts for a tag, completion on tags in target file.
	xx. ‘%?’ :: after completing the template, position point here
   - C-c c (or M-x org-capture) :: call capture templates menu.
   - C-c C-c (org-capture-finalize) :: save once finished entering information into capture buffer
     + C-c C-c returns to the window configuration before the capture process => resume your work without further distraction. When called with a prefix argument, finalize and then jump to the captured item.
   - C-c C-w (org-capture-refile) :: Finalize capture process by refiling the note to a different place
   - C-c C-k (org-capture-kill) :: Abort capture process and return to previous state.
   - can call 'org-capture' in a special way from agenda, using 'k c' key combination. With this access, any timestamps inserted by selected capture template defaults date at point in the agenda rather than to the current date.
   - find locations of last stored capture :: use 'org-capture' with prefix commands C-u:
     + C-u M-x org-capture :: Visit the target location of a capture template. You get to select the template in the usual way.
     + C-u C-u M-x org-capture :: Visit the last stored capture item in its buffer. 

** lisp

** agenda and TODO functionalities
*** 'TODO' tasks
    + show current TODO tasks, fold others :: C-c C-v
    + rotate state (ex: TODO to DONE, command 'org-todo') :: S-left/right, or C-c C-t
    + insert new todo below current (command 'org-insert-todo-heading') :: M-S-RET
    + show global todo list (collect todo items with not-done states from all agenda files into single buffer) ::
      (in agenda mode => manipulate entries in that mode; and default: only not DONE tasks)
      - M-x org-agenda t :: collect TODO items from all agenda files into single buffer
      - M-x org-agenda T :: like above, but allow selection of specific TODO work
*** agenda
     Basic meaning of the word agenda is 'things to be done' (from latin agendum.)
    + C-c a :: call agenda
    + C-c [ :: add current document to the list of agenda files
    + C-c ] :: remove document from the list of agenda files
    + C-c . :: choose date
      - S-left/right :: change date
    + C-u C-c . :: add time and date
    + C-g – stop doing what you are trying to do, escape
**** timed tasks: appointments and deadlines
     - C-c . :: call agenda entry (in TODO related headline)
     -  :: 

** checkboxes
   similar to TODO items, but in more lightweight way
   (hierarchical => if checkbox has checkboxes children, toggling child checkbox reflects on parent)
   1. add at beginning of task [ ] to create checkbox for task
   2. add into headline or where needed for counting [/] (where you want to print)
   3. checkboxes commands :
      - toggle between states :: C-c C-c

*** export
https://orgmode.org/manual/Exporting.html

*** plain-lists   
    - unordered lists :: starts with '-', '+', '\*'
    - ordered lists :: starts with number and dot
    - descriptions (only for unordered lists) :: just add ::
    - switch between itemize types and numbered list :: C-c -
      + !!! epending on 'org-plain-list-ordered-item-terminator', type of list, and its indentation
    - turn plain list item to headline :: C-c *

** GTD (Getting things done)

** report generation (automatic and customs)
