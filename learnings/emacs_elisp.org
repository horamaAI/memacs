# -*- mode: org -*-
#+title: Emacs and elisp learnings
#+SETUPFILE: ~/set-up-files/basic-setups.org

* emacs files types
- emacs.org~ :: usually for backup files
- #emacs.org# :: for auto-save state
- .#emacs.org :: file locking
- files in ~./emacs.d :: files that needs to be persistent throughout
  all emacs sessions

* First notes
- introduction ::
  #+INCLUDE: "./kbd_cheatsheet.org::#kbd_foreword" :only-contents t
- help keybindings ::
  #+INCLUDE: "./kbd_cheatsheet.org::#kbd_help" :only-contents t
- no namespaces in emacs, so to differentiate with existing function names, use short prefixes (https://emacs.stackexchange.com/questions/18030/function-naming-with-forward-slash)
  + eg :: bh/a-known-name-here
- hidden buffers start with space, hidden files of course start with dot
- prefer customizing variables, groups, etc. through ==M-x customize-xxx== rather than manually adding into emacs initialization file.

* To remember (need to, since very useful and used often)
- clocking in tasks :: [[file:kbd_cheatsheet.org::#org_task_to_clock_in][Find task to clock in]]
- estimating task time :: [[file:kbd_cheatsheet.org::#org_task_time_estimate][Task time estimate (with column view)]]

* org-mode
  - references ::
    + complete and detailed deep dive introduction to org mode from Bernt Hansen (marked bh in different org files) :: http://doc.norang.ca/org-mode.html
    + official org-mode manual :: https://orgmode.org/manual/index.html
    + others ::
      - https://orgmode.org/worg/org-tutorials/org4beginners.html
      - https://orgmode.org/orgguide.pdf
  - tutorials ::
    + https://orgmode.org/worg/org-tutorials/index.html
    + https://orgmode.org/worg/
  - to make Emacs understand it's Org document, add to top of document :: PROJECTNAME -*- mode: org -*-

** org-mode document structure


** agenda and TODO functionalities
*** 'TODO' tasks
    + show current TODO tasks, fold others :: C-c C-v
    + rotate state (ex: TODO to DONE, command 'org-todo') :: S-left/right, or C-c C-t
    + insert new todo below current (command 'org-insert-todo-heading') :: M-S-RET
    + show global todo list (collect todo items with not-done states from all agenda files into single buffer) ::
      (in agenda mode => manipulate entries in that mode; and default: only not DONE tasks)
      - M-x org-agenda t :: collect TODO items from all agenda files into single buffer
      - M-x org-agenda T :: like above, but allow selection of specific TODO work
*** agenda
     Basic meaning of the word agenda is 'things to be done' (from latin agendum.)
    + C-c a :: call agenda
    + C-c [ :: add current document to the list of agenda files
    + C-c ] :: remove document from the list of agenda files
    + C-c . :: choose date
      - S-left/right :: change date
    + C-u C-c . :: add time and date
    + C-g – stop doing what you are trying to do, escape
**** timed tasks: appointments and deadlines
     - C-c . :: call agenda entry (in TODO related headline)
     -  :: 

** 'capture' :: take quick notes to be completed later. Previously known as 'remember' (taking notes)
   x. org-capture is global: can be called anywhere in emacs, whether editing txt, or reading email
   x. main reference: https://orgmode.org/manual/Capture.html#Capture
   x. thorough tuto: http://howardism.org/Technical/Emacs/capturing-intro.html
   x. 'dateTrees': methods of specifying location based on the date.
        xx. 
   x. C-c C-c: save current capture and return to previous buffer
   x. During expansion of template, special %-escapes allow dynamic insertion of content: small selection of possibilities:
	xx. ‘%a’ :: annotation, normally the link created with org-store-link (from capture file, points to where capture was called)
	    xxx. can for example be useful when deriving task from mail
	xx. ‘%i’ :: initial content, the region when capture is called with C-u
	xx. ‘%t’, ‘%T’ :: timestamp, date only, or date and time
	xx. ‘%u’, ‘%U’ :: like above, but inactive timestamps
	xx. %^g :: prompts for a tag, completion on tags in target file.
	xx. ‘%?’ :: after completing the template, position point here
   - C-c c (or M-x org-capture) :: call capture templates menu.
   - C-c C-c (org-capture-finalize) :: save once finished entering information into capture buffer
     + C-c C-c returns to the window configuration before the capture process => resume your work without further distraction. When called with a prefix argument, finalize and then jump to the captured item.
   - C-c C-w (org-capture-refile) :: Finalize capture process by refiling the note to a different place
   - C-c C-k (org-capture-kill) :: Abort capture process and return to previous state.
   - can call 'org-capture' in a special way from agenda, using 'k c' key combination. With this access, any timestamps inserted by selected capture template defaults date at point in the agenda rather than to the current date.
   - find locations of last stored capture :: use 'org-capture' with prefix commands C-u:
     + C-u M-x org-capture :: Visit the target location of a capture template. You get to select the template in the usual way.
     + C-u C-u M-x org-capture :: Visit the last stored capture item in its buffer. 

** org-babel
   - sources ::
     + [[https://orgmode.org/worg/org-contrib/babel/intro.html][org-babel official page]]
   - Babel is about letting many different languages work together
     + eg :: "A piece of data might pass from an Org table to a Python code block, then maybe move on to an R code block, and finally end up embedded as a value in the middle of a paragraph or possibly pass through a Gnuplot code block and end up as a plot embedded in the document.", [[https://orgmode.org/worg/org-contrib/babel/intro.html][org-mode official page]]
   - Babel augments Org code blocks by providing ::
     + interactive and programmatic execution of code blocks;
     + code blocks as functions that accept parameters, refer to other code blocks, and can be called remotely; and
     + export to files for literate programming.


** plantuml :: UML for emacs
   - natively supported with org-babel :: 
   - publish graphics with plantuml and ditaa ::
     1. create source block within #+begin_src ... #+end_src
     2. build the picture with 'C-c C-c'
	- toggle display of inline images with 'C-c C-x C-v'

** lisp

** checkboxes
   similar to TODO items, but in more lightweight way
   (hierarchical => if checkbox has checkboxes children, toggling child checkbox reflects on parent)
   1. add at beginning of task [ ] to create checkbox for task
   2. add into headline or where needed for counting [/] (where you want to print)
   3. checkboxes commands :
      - toggle between states :: C-c C-c

*** plain-lists   
    - unordered lists :: starts with '-', '+', '\*'
    - ordered lists :: starts with number and dot
    - descriptions (only for unordered lists) :: just add ::
    - switch between itemize types and numbered list :: C-c -
      + !!! epending on 'org-plain-list-ordered-item-terminator', type of list, and its indentation
    - turn plain list item to headline :: C-c *

** GTD (Getting things done)

** report generation (automatic and customs)


* Habit: typical day with org-mode
  source :: http://doc.norang.ca/org-mode.html#CustomAgendaViewSetup
** Habit daily
   1. Punch in (start the clock on the default task)
   2. Look at the agenda and make a mental note of anything important to deal with today
   3. Read email and news
      * create notes, and tasks for things that need responses with org-capture
   4. Check refile tasks and respond to emails
   5. Look at agenda and work on important tasks for today
      * Clock it in
      * Work on it until it is DONE or it gets interrupted
   6. Work on tasks
   7. Make journal entries (C-c c j) for interruptions
   8. Punch out for lunch and punch back in after lunch
   9. work on more tasks
   10. Refile tasks to empty the list
       * Tag tasks to be refiled with 'm' collecting all tasks for the
         same target (bulk refile)
       * Bulk refile the tasks to the target location with 'B r'
       * Repeat (or refile individually with C-c C-w) until all refile tasks are gone
   11. Mark habits done today as DONE
   12. Punch out at the end of the work day

** Next tasks to work on 
   + Start with: *deadlines* and *tasks scheduled today or earlier* from
the daily agenda view.
   + Then move on to *tasks in the Next Tasks list* in the block
     agenda view.
   + Advice : schedule current projects to 'today' when starting to
     work on them. They sit on daily agenda reminding that they need
     to be completed.
   + !! Normally only schedule *one or two projects* to the daily agenda
     and unschedule things that are no longer important and don't deserve my attention today.
   + order of new task to pick ::
     1. Pick something off today's agenda
	- deadline for today (do this first - it's not late yet)
	- deadline in the past (it's already late)
	- a scheduled task for today (it's supposed to be done today)
	- a scheduled task that is still on the agenda
	- deadline that is coming up soon
     2. Pick a NEXT task
     3. If run out of items to work on, look for a NEXT task in the
        current context pick a task from the Tasks list of the current project.
   + !!! :: better use only 'NEXT' for 'projects' tasks ('NEXT' tasks
     are things available to work on *now*! <=> next logical step in a
     project <=> current task).


* Time clocking and reporting
#+INCLUDE: "./kbd_cheatsheet.org::#org_time_clocking_reporting" :only-contents t

* Tags
  - examples of use:
    + filtering todo lists and agenda views
    + providing context for tasks
    + tagging notes, phone calls, meetings, tasks to be refiled, ...
    + tagging tasks in WAITING state because parent is WAITING
    + tagging cancelled tasks because parent is CANCELLED
    + preventing export of some subtrees when publishing
    + etc.
  - use mutual exclusion when context appropriate :: @office should mutually
    exclude @home for example
  - mutually exclusive tags should be seen as :: "context" tags
  - tasks are grouped in org files with #+FILETAGS: entry :: apply
    tags to *all* tags, but to the file only => can use the tag to
    filter file specific tags
  - nice use of FILETAGS to apply multiple tags to files (eg: apply
    refile to all tasks in refile file)


* Handling phone calls
  (in conjunction with bbdb works better)
  - use of bbdb lookup to insert contact when phone capturing ::
    <f9>-p (of course if key mapping done in emacs init file)


* Filtering
  - / RET :: in agenda mode: filters tasks based on user-provided
    function
    + mark subsequently delayed tasks as on 'HOLD' => / RET filter
      removes all 'HOLD' tasks and subtasks.


* cheatsheets
** general
   - autocomplete ::
     + either with usual M-/ :: autocomplete (cycle through all known completions, even from other files)
     + or using company-mode :: (selected option)
   - emacs tutorial :: C-h t
   - focus current headline and hide others :: C-x n s
     + undo fold :: C-x n w
   - insert link :: C-c C-l, and follow instructions
     + ex (do not insert escape backslash \): \[\[https://www.youtube.com/watch?v=SzA2YODtgK4\]\[source video\]\]
       - gives : ex (do not insert escape backslash \): [[https://www.youtube.com/watch?v=SzA2YODtgK4][source video]]
   - kill buffer :: C-x k
   - kill until end of line :: C-k
   - list buffers :: C-x C-b
   - open link :: C-c C-o
   - other window ::
     + open file in other window :: C-x 4 C-f
     + move between windows :: C-x o
     + Scroll other window upward :: C-M-v
     + Scroll other window downward :: C-M-S-v
   - police formatting :: *Bold*, /italic/, =verbatim=,
     +strikethrough+, _underline_ (underscores)
   - rectangle playing ::
     1. *select rectangle* : C-x Space, or M-x rectangle-mark-mode
     2. then :
	+ insert string into selected rectangle :: C-x r t, or M-x string-rectangle
	+ but also ::
	  - kill rectangle :: C-x r k, or M-x kill-rectangle
	  - yank rectangle :: C-x r y, or M-x yank-rectangle
	  - delete rectangle :: C-x r d, or M-x delete-rectangle
   - save :: C-x C-S
   - sentences ::
     + Move between sentences :: `M-a' and `M-e'
     + Kill sentence forward :: ‘M-k’.
     + Kill sentence backward :: ‘C-x DEL’
   - switch buffer :: C-x b

** agenda view
   - custome agenda view use (mains) ::
     + single block agenda :: (show following :)
       - today's overview
       - find tasks ::
	 + to be refiled
	 + stuck projects
	 + next tasks
	 + waiting on something
	 + to be archived
       - show related tasks
       - reviewing projects
     + finding notes ::
     + viewing habits ::

** capture

** Dired (Directory editor)
   - C-x d, C-x 4 d, C-x 5 d :: visit directory
   - C-x C-q :: make dired buffer editable, ex: to rename files,
     change file ownership and privilege

** refile
   - C-c C-w :: call refile
   - ido and refile ::
     1. C-c C-w => [complete string for target file] => C-SPC to limit proposal list
        => [complete target region] => RET
   - refile bulk (group refile) ::
     1. mark the tasks to refile with 'm'
     2. and then 'B r' (maybe for 'bulk refile')
   - refile as subtask of current clocked task :: (see http://doc.norang.ca/org-mode.html#RefilingTasks)
   - refile notes ::
     + some notes are specific related to projects, and not generally
       useful, so can be archived with the project when it is completed.
   - refile phones and meetings :: nice to refile phones when billed
     into right category, but also meetings if needs follow ups.

** Ido
(Interactive Do 'IDO' : interactive use of buffers and files)
   - 'working directories' :: directories where files have most
     recently been opened. Current directory inserted at front of
     'ido-work-directory-list' whenever a file is opened with
     'ido-find-file' and other file-related functions.
     + 'ido-max-work-directory-list' :: specifies maximum number of working directories to record.
     + 'ido-max-dir-file-cache' :: specifies maximum number of working
       directories to be cached (size of cache of
       'file-name-all-completions' results)
   - Matching :: (among buffers, buffers and directories)
     + 'interactive substring matching' :: as typing substring, list of
       recently visited buffers/files appears
       - C-s or C-r :: to rotate between buffers/filenames/directories
       - TAB (ido-complete) :: to complete if current substring can be restricted
       - C-j (ido-select-text) :: select current completion as target,
         or create new buffer instead of one proposed if doesn't exist
       - to be even faster :: use characters that restrict the most
         the list of buffers/filenames/directories, ex: two files
         named 1234 and 123, just type 4 and directly get 1234
       - C-x C-f (ido-find-file) :: same as usual (find file), but
         with the perks of Ido
     +n 'prefix matching' :: 
       - C-p :: toggle to prefix matching
     - 'Flexible matching' ::
       - when 'ido-enable-flex-matching' is non-nil :: do flexible
         matching, ex: if exist buffers/files/directories alpha, beta,
         delta, gamma, when entering 'aa': will match alpha and gamma, while
         'ea' will match beta and delta. If prefix match also active,
         'aa' will match alpha only, while 'ea' won't match anything
     - 'regex matching' :: 
       - C-t :: toggling, when 'ido-enable-regexp' activated
       - ex: '[ch]$' :: list files ending with c or h 
   - hidden buffers/files, toggle display :: C-a (ido-toggle-ignore)


** emacs IDE

** org mode (general)
   - goto next visible headline :: C-c C-n
   - move headline up/down :: M-up/down
   - promote/demote headline :: M-left/right
   - switch between itemize to numbered list :: C-c -
     + !!! depends on 'org-plain-list-ordered-item-terminator', type of list, and its indentation
   - turn plain list item to headline :: C-c *
   - checkboxes :: similar to TODO items, but in more lightweight way
     (hierarchical => children reflects on parent)
     + toggle between states :: C-c C-c
   - TODO tasks ::
     + rotate state (ex: TODO to DONE, command 'org-todo') :: S-let/right, or C-c C-t
     + insert new todo below current (command 'org-insert-todo-heading') :: M-S-RET
     + global todo list (collect todo items with not-done states from all agenda files into single buffer) ::
       - M-x org-agenda t :: collect TODO items from all agenda files into single buffer
       - M-x org-agenda T :: like above, but allow selection of specific TODO work

** GTD
   - C-c a a :: 'org-agenda' + 'org-agenda-list' to view agenda list (default: weekly view)
   - C-c C-s :: 'org-schedule', schedule task
   - C-c C-d :: 'org-deadline', set deadline for task
*** Projects
    - lazy approach of projects :: A 'project' is every task with any subtask
    - 'stuck' projects :: any project without any 'NEXT' todo subtask
      defined, or its latest task is 'WAITING'
      + it's nice to keep 'waiting' tasks in the stuck project view so
        that it is noticed and has a regular 'follow-up'
    - org-mode agenda view for 'stuck' projects :: shows all projects
      without any 'NEXT' defined
      + => assign a 'NEXT' task if still needed

*** Weekly review process
    - pick a day in the week for the review (friday/monday)

*** Archiving
    Archiving allows cluter free tasks, and focus on latest tasks.
    If need to check archived tasks, then look in appropriate archived
    file.
    It is good to archive regularly tasks that have been 'DONE' for a period
    of time. ex: archive tasks that were completed since more than a
    month => current month benefits from clocking from last month.
    - 'a y' in agenda :: archive task subtree
    - in agenda ::
      + mark all entries to archive :: 'm'
      + archive them to the appropriate location :: 'B $'
    - using tag 'ARCHIVE' on a task :: useful when task contains data
      to check if specific need occurs

*** Publishing and exporting
    - source :: https://orgmode.org/worg/org-tutorials/org-publish-html-tutorial.html
    - publishing projects (or multiple files) ::
      + needs to setup variable :: 'org-publish-project-alist'
      + best to split each projects into 3 components (4 in fact), since org uses two different functions to publish (dynamic and static) ::
	1. 'notes' components for dynamic content :: org => html
	   + 'publishing-function' is set to :: org-publish-org-to-html
	   + eg ::
	      #+begin_src elisp
	      ("projA-notes"
        	   :base-directory "~/A/"                      ; components root directory
        	   :base-extension "org"                         ; filename suffix without the dot
        	   :publishing-directory "~/public_html/A/"        ; base directory where all files of all projects will be published
        	   :recursive t                                  ; if 't', include subdirectories - we want that. Subdirectories in :publishing-directory are created if they don't yet exist
        	   :publishing-function org-html-publish-to-html ; if and how org should process the files in this component. In this case: convert the Org-mode files to HTML
        	   :headline-levels 4                            ; level of display in table of content
        	   :auto-preamble t
		)
	      #+end_src
	2. 'static' components for static content :: scripts, imgs, stylesheets, .htaccess files => copy
	   + just copies files and folders from :base-directory to :publishing-directory without changing them ::
	   + tells org to use function :: org-publish-attachment
	   + eg ::
              #+begin_src elisp
              ("projA-static"
        	   :base-directory "~/A/"
        	   :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf"
        	   :publishing-directory "~/public_html/A/"
        	   :recursive t
        	   :publishing-function org-publish-attachment
		)
              #+end_src
	3. last component 'publish' component :: for convenience and tells org to execute former ones
	   + then M-x org-publish-project RET org RET publishes everything recursively to ~/public_html/. Target directories are created, if don't exist ::
	   + eg ::
	      #+begin_src elisp
	      ("projA" :components ("projA-notes" "projA-static"))
              #+end_src
	4. 'inherit' component :: to reuse static file common to several projects
	   + set base directory to folder which contains files common to several projects :: stylesheets and scripts for example
	   + imperative to run inherit component first in order to track changes in inherit base directory :: since components in projA are executed in listed sequence: first get the new stylesheet into A, then execute projA-static. 
	   + eg ::
             #+begin_src elisp
              ("projA-inherit"
        	   :base-directory "~/org/"  ; not the specific project folder. ~/org contains static files common to several projects
        	   :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf"
        	   :publishing-directory "~/public_html/A/"
        	   :recursive t
        	   :publishing-function org-publish-attachment
		)
	      ("projA-notes"...)
	      ("projA-static"...)
	      ("projA-project" :components ("projA-inherit" "projA-notes" "projA-static"))
             #+end_src
	   + can even re-use common :: // means, B C D and E use local stylesheets (in x-inherit) and always the latest version of org-info.js
             #+begin_src elisp
	     ("inherit-org-info-js"
	      :base-directory "~/develop/org/Worg/code/org-info-js/"
	      :recursive t
	      :base-extension "js"
	      :publishing-directory "~/org/"
	      :publishing-function org-publish-attachment)
	     
	     ;; ... all the rest ... ;;
	     
	     ("B" :components ("inherit-org-info-js" "B-inherit" "B-notes" "B-static"))
	     ("C" :components ("inherit-org-info-js" "C-inherit" "C-notes" "C-static"))
	     ("D" :components ("inherit-org-info-js" "D-inherit" "D-notes" "D-static"))
	     ("E" :components ("inherit-org-info-js" "E-inherit" "E-notes" "E-static"))
             #+end_src
      + org-info.js :: handy to navigate through the project      

** hledger


* emacs IDE
* Reproducible research with emacs
[2024-01-14 Sun 02:05]
** Notes
- sources ::
  + MOOC "Recherche reproductible : principes méthodologiques pour une science transparente", on fun-mooc.fr
- issues raised by poorly reproducible research :: 
- requirements :: 
** Reproducibility in research
[2024-01-14 Sun 04:29]
*** Categories of reproducibility
- Notes ::
  + differ depending on the scientific field

** git and emacs
[2024-01-14 Sun 04:16]


* Hledger (emacs finance)
