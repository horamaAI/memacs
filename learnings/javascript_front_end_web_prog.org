# -*- mode: org -*-
#+title: learning Javascript web programming language and tools
#+SETUPFILE: ~/set-up-files/basic-setups.org
#+TAGS: Java


* JavaScript (JS) and TypeScript (JS)
[2023-12-19 Tue 14:42]
- Notes ::
  + the official JS language specification standard is called ES (ECMAScript): ES version defined previously by sequential number (eg: ES3, ES5, etc, supported by older browsers), but from ES6, that was renamed 2015 -and brought many new features such as classes and arrow functions-, new version is released each year
    - => newer JS features have to be transpiled to older JS
  + TS :: open source, superset to JS (every JS code supported by TS), transpiles to plain JS (TS code must be compiled and converted to comparable JS syntax before the browser executes it)
    - dig further :: https://www.typescriptlang.org/
* Angular
** Notes
- angular :: JS framework for building client-side applications
- benefits :: more expressive html, powerful data-binding (to connect data directly to UI), promotes modularity ("modular by design": app built as a set of blocks (set of components), so that it is easier to create and reuse the contents), built-in support for back-end integration (easier communication with a back-end server)
- installing manually ::
  + nvm :: to select which version of node.js to install  (https://github.com/nvm-sh/nvm#installing-and-updating)
  + npm :: install it with nvm when done: ==nvm install --lts==, to install latest Node.js LTS release
    - check if everything is installed properly ::
      #+begin_src bash
      node -v
      npm -v
      #+end_src
- installation ::
  1. needed ::
     + angular framework and libraries :: 
     + angular cli :: 
     + TS ::
     + testing tools, linters ::
     + and others :: 
  2. for installing dependencies/packages, two options:
     + either use npm commands to install all those manually;
     + or as commonly done, define a ==package.json== file listing each needed packages, and use npm to install defined packages, their dependencies, with all the versions (~npm install~ in folder)
- in package.json, :: the list of packages is divided into two parts:
  + 'dependencies' :: packages required for development AND deployment, eg: primary angular packages, and supporting packages (~rxjs~) : ~@angular/(animations|common|compiler|etc.)~
  + 'devDependencies' :: packages only required for development, eg: ~@angular/(compiler|compiler-cli)~
  
** Anatomy of an angular app
[2023-12-19 Tue 14:04]
- angular ::
  + comprised of a set of components, or can also be seen as comprised of a set of services that provide functionality across components. eg of services: accessing data from a back end server, standard logging, exception handling, performing tax calculations, etc.
  + an angular application can be seen as a set of components, the developer arranges those components to form the application
- angular component :: each angular component has a: ==component = UI (template) + code (class (properties, methods)) + extra-data (metadata)==
  + template (UI) :: html defining a view for the application, can be seen as the UI,
  + class (code) :: contains the code associated with a view, the code behind the UI, contains:
    - properties :: or property variables, or data elements, hold the data to display in the UI, available for binding to the view
    - methods :: that perform actions for the view, eg: handle click on button
  + metadata :: provides further infos about the component to angular
*** angular project's folder structure
- uppermost files (at root of project, also called 'boilerplate files') :: configuration and setup files 
- ==src== :: by convention, all source code in 'src'
  + src subfolders ::
    - app :: contains source file specific to the application per se
      + app folder contains subfolders specific to each major feature of the application
- ==node_modules== :: contains the libraries and dependencies of installed packages
  + don't forget to escape it in the version controller, it is too heavy, and anyway we have the package.json to fetch all the required dependencies
    
*** angular application architecture
[2023-12-20 Wed 10:38]
+ index.html -> App Component ::
+ App Component -> Welcome Component, Product List Component ::
+ Product List Component -> Star Component, Product Detail Component ::
+ Product Detail Component -> Star Component ::
+ Product Data Service ::

** components in Angular
[2023-12-19 Tue 14:32]
*** Notes
[2023-12-20 Wed 10:46]
- component :: ==component = UI (template) + code (class (properties, methods)) + extra-data (metadata)==
  + template :: view layout, created with html, defines what is rendered on the page, includes binding and directives
  + class :: code supporting the view, created with TS, divided into properties (data), and methods (logic behind the view), eg: if wants to define a title in the view, then define a class property 'title' for the title; if wants to show/hide an image in the view, then add logic in class method
    - property :: defines a data element associated with a class (variables for example), format: ~propertyName: dataType = assignement~
  + metadata :: defines extra data for angular component (for eg, it's the metadata that defines a class to be a component class), metadata defined with decorators (function that adds metadata to a class, its members, or its method's arguments)
  + so in the end :: an angular *component is a view defined in a template, its associated code defined with a class, and metadata defined with a decorator*
  + eg :: imports, template, class, metadata
    #+begin_src javascript    
    import { Component } from '@angular/core'; // imports

    @Component({ // metadata & template components
      selector: 'pm-root',
      templateUrl: './app.component.html', /* specific to view */
      styleUrls: ['./app.component.css']
    })
    export class AppComponent { // class component
      title = 'Angular: Getting Started';
    }
    #+end_src
- data binded variables :: between double curly braces
  + data binding ties template values to class property values
    #+begin_src javascript
    @Component({
      selector: 'pm-root',
      template: '<div><h1>{{myTitle}}</h1></div>' // myTitle is binded to its property value in class AppComponent
    })
    export class AppComponent {
      myTitle: String = 'Toto is Getting Started';
    }
    #+end_src
- imports :: ~import { MemberNameToImport, MemberNameToImport2, MemberNameToImport3 } from 'LibraryOrComponentContainingTheImportedElement';
  + needed in order to use external function/class
  + allow using exported members from ::
    - other files in the application
    - angular framework, eg: @Component from angular core, so ~import { Component } from '@angular/core';~
    - external javascript libraries
    
*** Creating component classes
[2023-12-20 Wed 10:46]
- structure :: ~'export' 'class' ClassName {}~
  + eg ::
    #+begin_src js
    export class ClassName {
        propertyName: propertyType = assignment; // a property
        
    }
    #+end_src
  + naming convention ::
    - class name :: feature name + suffix 'Component', eg: class BookManagerComponent, and root class component named: AppComponent
    - camelCase ::
    - methods name :: verbs, describing the action the method performs
  + inside class :: properties + methods
  + 'export' keyword :: to export class and make it available to be referenced outside
- still need to define templates associated with the class to make the whole chunk a working component ::
  + in TS, the metadata ==component== is attached to the class component as a decorator
    
*** Defining metadata with decorators
[2023-12-20 Wed 10:47]
- a class becomes an angular component when given metadata component :: metadata are needed to understand how to:
  + instantiate the component
  + construct the view
  + interact with the component
- we define metadatas for a class by decorating (annotating for people with java background) the class with @Component decorator :: ~@Component({...})~
- decorators :: TS features/functions that add metadata to a class, its members, or its method arguments
  + decorators are prefixed with ~@~
  + scope of decorator :: limited to the feature that it decorates
  + angular integrates several built-in decorators :: eg: ~@Directive, @NgModule, @Injectable~, but most importantly ~@Component~ decorator to identify the class as a component
    #+begin_src javascript
    @Component({ // ClassName class is decorated with @Component for metadata
        ...
        })
    export class ClassName {
        propertyName: propertyType = assignment; // a property
    
    }
    #+end_src
  + decorator functions format :: ~@Adecorator({...})~
    - decorators are functions with argument objects (as seen passed as curly braces)
    - decorator object have properties: eg:
      + selector :: to find (select) the html elements needed to style
      + templateUrl :: define template (view) file (can directly enter the html code with decorator ==template==)
      + styleUrls :: for css,
      + etc.
      #+begin_src javascript
      @Component({          
        selector: 'pm-root',
        templateUrl: './app.component.html',
        styleUrls: ['./app.component.css']
      }
      #+end_src

*** Imports
[2023-12-20 Wed 10:47]
*** Bootstrapping app component
[2023-12-20 Wed 10:47]
*** Nested components

*** Debugging
[2023-12-20 Wed 10:48]
** Services and dependency injection
[2023-12-19 Tue 14:34]

** Templates, interpolation and directives
[2023-12-19 Tue 14:33]

** Data binding and pipes
[2023-12-19 Tue 14:33]

** Angular modules
[2023-12-19 Tue 14:36]

** Navigation and routing
[2023-12-19 Tue 14:36]

** Retrieving data using http
[2023-12-19 Tue 14:35]

** Angular cli
[2023-12-19 Tue 14:40]
- used to generate code, execute the application, deploy to production, etc., etc.

* NVM, Node, NPM
[2023-12-19 Tue 15:18]
- what's npm ? :: many things: repository, command line tool, package manager, etc
- what does npm can do ? ::
  + install libraries, packages, dependencies, applications, etc.
  + execute scripts to perform tasks, such as: run JS application
- npm cli :: to interact with repository
** npm scripts
[2023-12-19 Tue 17:18]
- eg from package.json ::
  + if type:
    - ~npm start~, will run ~ng serve -o~;
    - ~npm build~, will run ~ng build~; etc.
    - ~ng~ executes the angular cli on the command given by the string after ng
      + two ways of installing angular 'ng' :: locally, globally. In the former case, running ~ng~ commands on a terminal won't do anything. Angular cli needs to be installed globally to use 'ng' commands in the terminal
      + for example ~serve -o~: builds the application, and starts a local web server that serves up the application without deploying it; ~-o~: option to open the url in the default browser
        #+begin_src js
        {
            // ...
            "scripts": {
                "ng": "ng",
                "start": "ng serve -o",
                "build": "ng build",
                "watch": "ng build --watch --configuration development",
                "test": "ng test"
                },
            "private": true
            // ...
            }
        #+end_src

** Some commands
*** angular cli (~ng~)
[2023-12-20 Wed 10:29]
- ng new anapp --prefix pm :: create new angular app with an existing prefix pm (for product manager)

*** npm
[2023-12-19 Tue 15:43]
- npm install :: (without explicit call to package) install dependencies defined in package.json
  + npm install abc :: request package abc from npm repository, install it in current folder, subfolder ==node_modules==. ==node_modules== contains the libraries and dependencies of installed packages
  + be aware :: installation warning logs are not all pertinent, if suggests you for example to ~npm audit fix --force~, DON'T!!, the new updated versions might mess up your application
- npm start :: to start the installed angular application

*** nvm
- nvm ls :: list installed versions
- nvm install --lts :: install latest Node.js LTS release
  + nvm ls-remote :: to list available versions
  + nvm install 8.16.2 :: install specific version of node
  + nvm install node :: install latest release
  + nvm install carbon :: nstall an older LTS release by codename
- nvm use 10.16.3 :: switch node version for the active shell
  + nvm use node :: switch to the latest installed version
  + nvm use --lts :: use the latest LTS version
- nvm alias default 10.0.0 :: change lts alias version to 10.0.0

* Definitions
[2023-12-19 Tue 12:15]
- node :: Node.js (a JavaScript runtime that allows you to build scalable and efficient web applications)
- npm ::  package manager (node package manager) for the JavaScript programming language (provids access to a vast ecosystem of libraries and tools)
  + online registry/repository of open source libraries and packages
  + contains many JS packages (angular, TS, bootstrap, etc.)
- nvm :: version manager for node.js (allows you to quickly install and use different versions of node via the command line.)
- transpiling :: convert source code from a programming language into an equivalent source code of the same or a different programming language
